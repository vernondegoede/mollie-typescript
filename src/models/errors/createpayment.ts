/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type CreatePaymentDocumentation = {
  href?: any | undefined;
  type?: any | undefined;
};

export type CreatePaymentLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation?: CreatePaymentDocumentation | undefined;
};

/**
 * An error response object.
 */
export type CreatePaymentPaymentsAPIResponseBodyData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: CreatePaymentLinks | undefined;
};

/**
 * An error response object.
 */
export class CreatePaymentPaymentsAPIResponseBody extends Error {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: CreatePaymentLinks | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreatePaymentPaymentsAPIResponseBodyData;

  constructor(err: CreatePaymentPaymentsAPIResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.status != null) this.status = err.status;
    if (err.title != null) this.title = err.title;
    if (err.detail != null) this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    if (err.links != null) this.links = err.links;

    this.name = "CreatePaymentPaymentsAPIResponseBody";
  }
}

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type Documentation = {
  href?: any | undefined;
  type?: any | undefined;
};

export type Links = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation?: Documentation | undefined;
};

/**
 * An error response object.
 */
export type CreatePaymentResponseBodyData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: Links | undefined;
};

/**
 * An error response object.
 */
export class CreatePaymentResponseBody extends Error {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: Links | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreatePaymentResponseBodyData;

  constructor(err: CreatePaymentResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.status != null) this.status = err.status;
    if (err.title != null) this.title = err.title;
    if (err.detail != null) this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    if (err.links != null) this.links = err.links;

    this.name = "CreatePaymentResponseBody";
  }
}

/** @internal */
export const CreatePaymentDocumentation$inboundSchema: z.ZodType<
  CreatePaymentDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.any(),
  type: z.any(),
});

/** @internal */
export type CreatePaymentDocumentation$Outbound = {
  href?: any;
  type?: any;
};

/** @internal */
export const CreatePaymentDocumentation$outboundSchema: z.ZodType<
  CreatePaymentDocumentation$Outbound,
  z.ZodTypeDef,
  CreatePaymentDocumentation
> = z.object({
  href: z.any(),
  type: z.any(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentDocumentation$ {
  /** @deprecated use `CreatePaymentDocumentation$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentDocumentation$inboundSchema;
  /** @deprecated use `CreatePaymentDocumentation$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentDocumentation$outboundSchema;
  /** @deprecated use `CreatePaymentDocumentation$Outbound` instead. */
  export type Outbound = CreatePaymentDocumentation$Outbound;
}

/** @internal */
export const CreatePaymentLinks$inboundSchema: z.ZodType<
  CreatePaymentLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => CreatePaymentDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type CreatePaymentLinks$Outbound = {
  documentation?: CreatePaymentDocumentation$Outbound | undefined;
};

/** @internal */
export const CreatePaymentLinks$outboundSchema: z.ZodType<
  CreatePaymentLinks$Outbound,
  z.ZodTypeDef,
  CreatePaymentLinks
> = z.object({
  documentation: z.lazy(() => CreatePaymentDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentLinks$ {
  /** @deprecated use `CreatePaymentLinks$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentLinks$inboundSchema;
  /** @deprecated use `CreatePaymentLinks$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentLinks$outboundSchema;
  /** @deprecated use `CreatePaymentLinks$Outbound` instead. */
  export type Outbound = CreatePaymentLinks$Outbound;
}

/** @internal */
export const CreatePaymentPaymentsAPIResponseBody$inboundSchema: z.ZodType<
  CreatePaymentPaymentsAPIResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number().int().optional(),
  title: z.string().optional(),
  detail: z.string().optional(),
  field: z.nullable(z.string()).optional(),
  _links: z.lazy(() => CreatePaymentLinks$inboundSchema).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_links": "links",
    });

    return new CreatePaymentPaymentsAPIResponseBody(remapped);
  });

/** @internal */
export type CreatePaymentPaymentsAPIResponseBody$Outbound = {
  status?: number | undefined;
  title?: string | undefined;
  detail?: string | undefined;
  field?: string | null | undefined;
  _links?: CreatePaymentLinks$Outbound | undefined;
};

/** @internal */
export const CreatePaymentPaymentsAPIResponseBody$outboundSchema: z.ZodType<
  CreatePaymentPaymentsAPIResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePaymentPaymentsAPIResponseBody
> = z.instanceof(CreatePaymentPaymentsAPIResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number().int().optional(),
      title: z.string().optional(),
      detail: z.string().optional(),
      field: z.nullable(z.string()).optional(),
      links: z.lazy(() => CreatePaymentLinks$outboundSchema).optional(),
    }).transform((v) => {
      return remap$(v, {
        links: "_links",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentPaymentsAPIResponseBody$ {
  /** @deprecated use `CreatePaymentPaymentsAPIResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreatePaymentPaymentsAPIResponseBody$inboundSchema;
  /** @deprecated use `CreatePaymentPaymentsAPIResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreatePaymentPaymentsAPIResponseBody$outboundSchema;
  /** @deprecated use `CreatePaymentPaymentsAPIResponseBody$Outbound` instead. */
  export type Outbound = CreatePaymentPaymentsAPIResponseBody$Outbound;
}

/** @internal */
export const Documentation$inboundSchema: z.ZodType<
  Documentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.any(),
  type: z.any(),
});

/** @internal */
export type Documentation$Outbound = {
  href?: any;
  type?: any;
};

/** @internal */
export const Documentation$outboundSchema: z.ZodType<
  Documentation$Outbound,
  z.ZodTypeDef,
  Documentation
> = z.object({
  href: z.any(),
  type: z.any(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documentation$ {
  /** @deprecated use `Documentation$inboundSchema` instead. */
  export const inboundSchema = Documentation$inboundSchema;
  /** @deprecated use `Documentation$outboundSchema` instead. */
  export const outboundSchema = Documentation$outboundSchema;
  /** @deprecated use `Documentation$Outbound` instead. */
  export type Outbound = Documentation$Outbound;
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    documentation: z.lazy(() => Documentation$inboundSchema).optional(),
  });

/** @internal */
export type Links$Outbound = {
  documentation?: Documentation$Outbound | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  documentation: z.lazy(() => Documentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

/** @internal */
export const CreatePaymentResponseBody$inboundSchema: z.ZodType<
  CreatePaymentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number().int().optional(),
  title: z.string().optional(),
  detail: z.string().optional(),
  field: z.nullable(z.string()).optional(),
  _links: z.lazy(() => Links$inboundSchema).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_links": "links",
    });

    return new CreatePaymentResponseBody(remapped);
  });

/** @internal */
export type CreatePaymentResponseBody$Outbound = {
  status?: number | undefined;
  title?: string | undefined;
  detail?: string | undefined;
  field?: string | null | undefined;
  _links?: Links$Outbound | undefined;
};

/** @internal */
export const CreatePaymentResponseBody$outboundSchema: z.ZodType<
  CreatePaymentResponseBody$Outbound,
  z.ZodTypeDef,
  CreatePaymentResponseBody
> = z.instanceof(CreatePaymentResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number().int().optional(),
      title: z.string().optional(),
      detail: z.string().optional(),
      field: z.nullable(z.string()).optional(),
      links: z.lazy(() => Links$outboundSchema).optional(),
    }).transform((v) => {
      return remap$(v, {
        links: "_links",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatePaymentResponseBody$ {
  /** @deprecated use `CreatePaymentResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreatePaymentResponseBody$inboundSchema;
  /** @deprecated use `CreatePaymentResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreatePaymentResponseBody$outboundSchema;
  /** @deprecated use `CreatePaymentResponseBody$Outbound` instead. */
  export type Outbound = CreatePaymentResponseBody$Outbound;
}
