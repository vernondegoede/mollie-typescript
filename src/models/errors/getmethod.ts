/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetMethodMethodsAPIDocumentation = {
  href?: any | undefined;
  type?: any | undefined;
};

export type GetMethodMethodsAPILinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation?: GetMethodMethodsAPIDocumentation | undefined;
};

/**
 * An error response object.
 */
export type GetMethodMethodsAPIResponseBodyData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: GetMethodMethodsAPILinks | undefined;
};

/**
 * An error response object.
 */
export class GetMethodMethodsAPIResponseBody extends Error {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: GetMethodMethodsAPILinks | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetMethodMethodsAPIResponseBodyData;

  constructor(err: GetMethodMethodsAPIResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.status != null) this.status = err.status;
    if (err.title != null) this.title = err.title;
    if (err.detail != null) this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    if (err.links != null) this.links = err.links;

    this.name = "GetMethodMethodsAPIResponseBody";
  }
}

/**
 * The URL to the generic Mollie API error handling guide.
 */
export type GetMethodDocumentation = {
  href?: any | undefined;
  type?: any | undefined;
};

export type GetMethodLinks = {
  /**
   * The URL to the generic Mollie API error handling guide.
   */
  documentation?: GetMethodDocumentation | undefined;
};

/**
 * An error response object.
 */
export type GetMethodResponseBodyData = {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: GetMethodLinks | undefined;
};

/**
 * An error response object.
 */
export class GetMethodResponseBody extends Error {
  /**
   * The status code of the error message. This is always the same code as the status code of the HTTP message itself.
   */
  status?: number | undefined;
  /**
   * The HTTP reason phrase of the error. For example, for a `404` error, the `title` will be `Not Found`.
   */
  title?: string | undefined;
  /**
   * A detailed human-readable description of the error that occurred.
   */
  detail?: string | undefined;
  /**
   * If the error was caused by a value provided by you in a specific field, the `field` property will contain the name of the field that caused the issue.
   */
  field?: string | null | undefined;
  links?: GetMethodLinks | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetMethodResponseBodyData;

  constructor(err: GetMethodResponseBodyData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.status != null) this.status = err.status;
    if (err.title != null) this.title = err.title;
    if (err.detail != null) this.detail = err.detail;
    if (err.field != null) this.field = err.field;
    if (err.links != null) this.links = err.links;

    this.name = "GetMethodResponseBody";
  }
}

/** @internal */
export const GetMethodMethodsAPIDocumentation$inboundSchema: z.ZodType<
  GetMethodMethodsAPIDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.any(),
  type: z.any(),
});

/** @internal */
export type GetMethodMethodsAPIDocumentation$Outbound = {
  href?: any;
  type?: any;
};

/** @internal */
export const GetMethodMethodsAPIDocumentation$outboundSchema: z.ZodType<
  GetMethodMethodsAPIDocumentation$Outbound,
  z.ZodTypeDef,
  GetMethodMethodsAPIDocumentation
> = z.object({
  href: z.any(),
  type: z.any(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodMethodsAPIDocumentation$ {
  /** @deprecated use `GetMethodMethodsAPIDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMethodMethodsAPIDocumentation$inboundSchema;
  /** @deprecated use `GetMethodMethodsAPIDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMethodMethodsAPIDocumentation$outboundSchema;
  /** @deprecated use `GetMethodMethodsAPIDocumentation$Outbound` instead. */
  export type Outbound = GetMethodMethodsAPIDocumentation$Outbound;
}

/** @internal */
export const GetMethodMethodsAPILinks$inboundSchema: z.ZodType<
  GetMethodMethodsAPILinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetMethodMethodsAPIDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetMethodMethodsAPILinks$Outbound = {
  documentation?: GetMethodMethodsAPIDocumentation$Outbound | undefined;
};

/** @internal */
export const GetMethodMethodsAPILinks$outboundSchema: z.ZodType<
  GetMethodMethodsAPILinks$Outbound,
  z.ZodTypeDef,
  GetMethodMethodsAPILinks
> = z.object({
  documentation: z.lazy(() => GetMethodMethodsAPIDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodMethodsAPILinks$ {
  /** @deprecated use `GetMethodMethodsAPILinks$inboundSchema` instead. */
  export const inboundSchema = GetMethodMethodsAPILinks$inboundSchema;
  /** @deprecated use `GetMethodMethodsAPILinks$outboundSchema` instead. */
  export const outboundSchema = GetMethodMethodsAPILinks$outboundSchema;
  /** @deprecated use `GetMethodMethodsAPILinks$Outbound` instead. */
  export type Outbound = GetMethodMethodsAPILinks$Outbound;
}

/** @internal */
export const GetMethodMethodsAPIResponseBody$inboundSchema: z.ZodType<
  GetMethodMethodsAPIResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number().int().optional(),
  title: z.string().optional(),
  detail: z.string().optional(),
  field: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetMethodMethodsAPILinks$inboundSchema).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_links": "links",
    });

    return new GetMethodMethodsAPIResponseBody(remapped);
  });

/** @internal */
export type GetMethodMethodsAPIResponseBody$Outbound = {
  status?: number | undefined;
  title?: string | undefined;
  detail?: string | undefined;
  field?: string | null | undefined;
  _links?: GetMethodMethodsAPILinks$Outbound | undefined;
};

/** @internal */
export const GetMethodMethodsAPIResponseBody$outboundSchema: z.ZodType<
  GetMethodMethodsAPIResponseBody$Outbound,
  z.ZodTypeDef,
  GetMethodMethodsAPIResponseBody
> = z.instanceof(GetMethodMethodsAPIResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number().int().optional(),
      title: z.string().optional(),
      detail: z.string().optional(),
      field: z.nullable(z.string()).optional(),
      links: z.lazy(() => GetMethodMethodsAPILinks$outboundSchema).optional(),
    }).transform((v) => {
      return remap$(v, {
        links: "_links",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodMethodsAPIResponseBody$ {
  /** @deprecated use `GetMethodMethodsAPIResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetMethodMethodsAPIResponseBody$inboundSchema;
  /** @deprecated use `GetMethodMethodsAPIResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetMethodMethodsAPIResponseBody$outboundSchema;
  /** @deprecated use `GetMethodMethodsAPIResponseBody$Outbound` instead. */
  export type Outbound = GetMethodMethodsAPIResponseBody$Outbound;
}

/** @internal */
export const GetMethodDocumentation$inboundSchema: z.ZodType<
  GetMethodDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.any(),
  type: z.any(),
});

/** @internal */
export type GetMethodDocumentation$Outbound = {
  href?: any;
  type?: any;
};

/** @internal */
export const GetMethodDocumentation$outboundSchema: z.ZodType<
  GetMethodDocumentation$Outbound,
  z.ZodTypeDef,
  GetMethodDocumentation
> = z.object({
  href: z.any(),
  type: z.any(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodDocumentation$ {
  /** @deprecated use `GetMethodDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMethodDocumentation$inboundSchema;
  /** @deprecated use `GetMethodDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMethodDocumentation$outboundSchema;
  /** @deprecated use `GetMethodDocumentation$Outbound` instead. */
  export type Outbound = GetMethodDocumentation$Outbound;
}

/** @internal */
export const GetMethodLinks$inboundSchema: z.ZodType<
  GetMethodLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentation: z.lazy(() => GetMethodDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetMethodLinks$Outbound = {
  documentation?: GetMethodDocumentation$Outbound | undefined;
};

/** @internal */
export const GetMethodLinks$outboundSchema: z.ZodType<
  GetMethodLinks$Outbound,
  z.ZodTypeDef,
  GetMethodLinks
> = z.object({
  documentation: z.lazy(() => GetMethodDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodLinks$ {
  /** @deprecated use `GetMethodLinks$inboundSchema` instead. */
  export const inboundSchema = GetMethodLinks$inboundSchema;
  /** @deprecated use `GetMethodLinks$outboundSchema` instead. */
  export const outboundSchema = GetMethodLinks$outboundSchema;
  /** @deprecated use `GetMethodLinks$Outbound` instead. */
  export type Outbound = GetMethodLinks$Outbound;
}

/** @internal */
export const GetMethodResponseBody$inboundSchema: z.ZodType<
  GetMethodResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number().int().optional(),
  title: z.string().optional(),
  detail: z.string().optional(),
  field: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetMethodLinks$inboundSchema).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_links": "links",
    });

    return new GetMethodResponseBody(remapped);
  });

/** @internal */
export type GetMethodResponseBody$Outbound = {
  status?: number | undefined;
  title?: string | undefined;
  detail?: string | undefined;
  field?: string | null | undefined;
  _links?: GetMethodLinks$Outbound | undefined;
};

/** @internal */
export const GetMethodResponseBody$outboundSchema: z.ZodType<
  GetMethodResponseBody$Outbound,
  z.ZodTypeDef,
  GetMethodResponseBody
> = z.instanceof(GetMethodResponseBody)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number().int().optional(),
      title: z.string().optional(),
      detail: z.string().optional(),
      field: z.nullable(z.string()).optional(),
      links: z.lazy(() => GetMethodLinks$outboundSchema).optional(),
    }).transform((v) => {
      return remap$(v, {
        links: "_links",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodResponseBody$ {
  /** @deprecated use `GetMethodResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetMethodResponseBody$inboundSchema;
  /** @deprecated use `GetMethodResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetMethodResponseBody$outboundSchema;
  /** @deprecated use `GetMethodResponseBody$Outbound` instead. */
  export type Outbound = GetMethodResponseBody$Outbound;
}
