/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GetPaymentRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `details.qrCode`: Include a QR code object. Only available for iDEAL, Bancontact and bank transfer payments.
   * * `details.remainderDetails`: For payments where gift cards or vouchers were applied and the remaining amount was paid with another payment method, this include will add another `details` object specifically for the remainder payment.
   */
  include?: string | null | undefined;
  /**
   * This endpoint allows embedding related API items by appending the following values via the `embed` query string parameter.
   *
   * @remarks
   *
   * * `captures`: Embed all captures created for this payment.
   * * `refunds`: Embed all refunds created for this payment.
   * * `chargebacks`: Embed all chargebacks created for this payment.
   */
  embed?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
 *
 * @remarks
 *
 * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
 */
export type GetPaymentAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
 */
export type AmountRefunded = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The remaining amount that can be refunded. Only available when refunds are available for this payment.
 */
export type AmountRemaining = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that is already captured for this payment. Only available when this payment supports captures.
 */
export type AmountCaptured = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
 */
export type AmountChargedBack = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
 *
 * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
 */
export type SettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The price of a single item including VAT.
 *
 * @remarks
 *
 * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
 *
 * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
 *
 * The unit price can be zero in case of free items.
 */
export type GetPaymentUnitPrice = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
 */
export type GetPaymentDiscountAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The total amount of the line, including VAT and discounts.
 *
 * @remarks
 *
 * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
 *
 * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
 */
export type GetPaymentTotalAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
 *
 * @remarks
 *
 * Any deviations from this will result in an error.
 *
 * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
 */
export type GetPaymentVatAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type GetPaymentLines = {
  /**
   * The type of product purchased. For example, a physical or a digital product.
   *
   * @remarks
   *
   * Possible values: `physical` `digital` `shipping_fee` `discount` `store_credit` `gift_card` `surcharge` (default: `physical`)
   */
  type?: string | undefined;
  /**
   * A description of the line item. For example *LEGO 4440 Forest Police Station*.
   */
  description: string;
  /**
   * The number of items.
   */
  quantity: number;
  /**
   * The unit for the quantity. For example *pcs*, *kg*, or *cm*.
   */
  quantityUnit?: string | undefined;
  /**
   * The price of a single item including VAT.
   *
   * @remarks
   *
   * For example: `{"currency":"EUR", "value":"89.00"}` if the box of LEGO costs €89.00 each.
   *
   * For types `discount`, `store_credit`, and `gift_card`, the unit price must be negative.
   *
   * The unit price can be zero in case of free items.
   */
  unitPrice: GetPaymentUnitPrice;
  /**
   * Any line-specific discounts, as a positive amount. Not relevant if the line itself is already a discount type.
   */
  discountAmount?: GetPaymentDiscountAmount | undefined;
  /**
   * The total amount of the line, including VAT and discounts.
   *
   * @remarks
   *
   * Should match the following formula: `(unitPrice × quantity) - discountAmount`.
   *
   * The sum of all `totalAmount` values of all order lines should be equal to the full payment amount.
   */
  totalAmount: GetPaymentTotalAmount;
  /**
   * The VAT rate applied to the line, for example `21.00` for 21%. The vatRate should be passed as a string and not as a float, to ensure the correct number of decimals are passed.
   */
  vatRate?: string | undefined;
  /**
   * The amount of value-added tax on the line. The `totalAmount` field includes VAT, so the `vatAmount` can be calculated with the formula `totalAmount × (vatRate / (100 + vatRate))`.
   *
   * @remarks
   *
   * Any deviations from this will result in an error.
   *
   * For example, for a `totalAmount` of SEK 100.00 with a 25.00% VAT rate, we expect a VAT amount of `SEK 100.00 × (25 / 125) = SEK 20.00`.
   */
  vatAmount?: GetPaymentVatAmount | undefined;
  /**
   * The SKU, EAN, ISBN or UPC of the product sold.
   */
  sku?: string | undefined;
  /**
   * A link pointing to an image of the product sold.
   */
  imageUrl?: string | undefined;
  /**
   * A link pointing to the product page in your web shop of the product sold.
   */
  productUrl?: string | undefined;
};

/**
 * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion. This is particularly relevant for card payments.
 */
export type GetPaymentBillingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   */
  postalCode?: string | undefined;
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  city: string;
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
};

/**
 * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion. This is particularly relevant for card payments.
 */
export type GetPaymentShippingAddress = {
  /**
   * The title of the person, for example *Mr.* or *Mrs.*.
   */
  title?: string | undefined;
  /**
   * The given name (first name) of the person should be at least two characters and cannot contain only numbers.
   */
  givenName?: string | undefined;
  /**
   * The given family name (surname) of the person should be at least two characters and cannot contain only numbers.
   */
  familyName?: string | undefined;
  /**
   * The name of the organization, in case the addressee is an organization.
   */
  organizationName?: string | undefined;
  /**
   * A street and street number.
   */
  streetAndNumber: string;
  /**
   * Any additional addressing details, for example an apartment number.
   */
  streetAdditional?: string | undefined;
  /**
   * A postal code. This field may be required if the provided country has a postal code system.
   */
  postalCode?: string | undefined;
  email?: string | undefined;
  /**
   * If provided, it must be in the [E.164](https://en.wikipedia.org/wiki/E.164) format. For example: +31208202070.
   */
  phone?: string | undefined;
  city: string;
  region?: string | undefined;
  /**
   * A country code in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format.
   */
  country: string;
};

/**
 * The fee that you wish to charge.
 *
 * @remarks
 *
 * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
 */
export type GetPaymentPaymentsAPIAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
 *
 * @remarks
 *
 * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
 *
 * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
 */
export type GetPaymentApplicationFee = {
  /**
   * The fee that you wish to charge.
   *
   * @remarks
   *
   * Be careful to leave enough space for Mollie's own fees to be deducted as well. For example, you cannot charge a €0.99 fee on a €1.00 payment.
   */
  amount?: GetPaymentPaymentsAPIAmount | undefined;
  /**
   * The description of the application fee. This will appear on settlement reports towards both you and the connected merchant.
   */
  description?: string | undefined;
};

/**
 * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
 */
export type GetPaymentPaymentsAPIResponseAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The destination of this portion of the payment.
 */
export type GetPaymentDestination = {
  /**
   * The type of destination. Currently only the destination type `organization` is supported.
   *
   * @remarks
   *
   * Possible values: `organization`
   */
  type?: string | undefined;
  /**
   * Required for destination type `organization`. The ID of the connected organization the funds should be routed to.
   */
  organizationId?: string | undefined;
};

export type GetPaymentRouting = {
  /**
   * The portion of the total payment amount being routed. Currently only `EUR` payments can be routed.
   */
  amount?: GetPaymentPaymentsAPIResponseAmount | undefined;
  /**
   * The destination of this portion of the payment.
   */
  destination?: GetPaymentDestination | undefined;
  /**
   * Optionally, schedule this portion of the payment to be transferred to its destination on a later date. The date must be given in `YYYY-MM-DD` format.
   *
   * @remarks
   *
   * If no date is given, the funds become available to the connected merchant as soon as the payment succeeds.
   */
  releaseDate?: string | undefined;
};

/**
 * An object containing payment details collected during the payment process. For example, details may include the customer's card or bank details and a payment reference. For the full list of details, please refer to the [method-specific parameters](extra-payment-parameters) guide.
 */
export type Details = {};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPaymentSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
 */
export type Checkout = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
 */
export type MobileAppCheckout = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
 *
 * @remarks
 *
 * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
 *
 * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
 */
export type ChangePaymentState = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * Direct link to the payment in the Mollie Dashboard.
 */
export type Dashboard = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
 */
export type Refunds = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
 */
export type Chargebacks = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
 */
export type Captures = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
 */
export type Settlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
 */
export type Order = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
 */
export type Terminal = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetPaymentDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetPaymentLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetPaymentSelf | undefined;
  /**
   * The URL your customer should visit to make the payment. This is where you should redirect the customer to.
   */
  checkout?: Checkout | null | undefined;
  /**
   * The deeplink URL to the app of the payment method. Currently only available for `bancontact`.
   */
  mobileAppCheckout?: MobileAppCheckout | null | undefined;
  /**
   * For test mode payments in certain scenarios, a hosted interface is available to help you test different payment states.
   *
   * @remarks
   *
   * Firstly, for recurring test mode payments. Recurring payments do not have a checkout URL, because these payments are executed without any user interaction.
   *
   * Secondly, for paid test mode payments. The payment state screen will then allow you to create a refund or chargeback for the test payment.
   */
  changePaymentState?: ChangePaymentState | null | undefined;
  /**
   * Direct link to the payment in the Mollie Dashboard.
   */
  dashboard?: Dashboard | undefined;
  /**
   * The API resource URL of the [refunds](list-payment-refunds) that belong to this payment.
   */
  refunds?: Refunds | null | undefined;
  /**
   * The API resource URL of the [chargebacks](list-payment-chargebacks) that belong to this payment.
   */
  chargebacks?: Chargebacks | undefined;
  /**
   * The API resource URL of the [captures](list-payment-captures) that belong to this payment.
   */
  captures?: Captures | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this payment has been settled with. Not present if not yet settled.
   */
  settlement?: Settlement | null | undefined;
  /**
   * The API resource URL of the [order](get-order) this payment was created for. Not present if not created for an order.
   */
  order?: Order | null | undefined;
  /**
   * The API resource URL of the [terminal](get-terminal) this payment was created for. Only present for point-of-sale payments.
   */
  terminal?: Terminal | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetPaymentDocumentation | undefined;
};

/**
 * The payment object.
 */
export type GetPaymentResponseBody = {
  /**
   * Indicates the response contains a payment object. Will always contain the string `payment` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this payment. Mollie assigns this identifier at payment creation time. Mollie will always refer to the payment by this ID. Example: `tr_7UhSN1zuXS`.
   */
  id?: string | undefined;
  /**
   * Whether this entity was created in live mode or in test mode.
   *
   * @remarks
   *
   * Possible values: `live` `test`
   */
  mode?: string | undefined;
  /**
   * The description of the payment. This will be shown to your customer on their card or bank statement when possible. We truncate the description automatically according to the limits of the used payment method. The description is also visible in any exports you generate.
   *
   * @remarks
   *
   * We recommend you use a unique identifier so that you can always link the payment to the order in your back office. This is particularly useful for bookkeeping.
   *
   * The maximum length of the description field differs per payment method, with the absolute maximum being 255 characters. The API will not reject strings longer than the maximum length but it will truncate them to fit.
   */
  description?: string | undefined;
  /**
   * The amount that you want to charge, e.g. `{currency:"EUR", value:"1000.00"}` if you would want to charge €1000.00.
   *
   * @remarks
   *
   * You can find the minimum and maximum amounts per payment method in our help center. Additionally, they can be retrieved using the Get method endpoint.
   */
  amount?: GetPaymentAmount | undefined;
  /**
   * The total amount that is already refunded. Only available when refunds are available for this payment. For some payment methods, this amount may be higher than the payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
   */
  amountRefunded?: AmountRefunded | null | undefined;
  /**
   * The remaining amount that can be refunded. Only available when refunds are available for this payment.
   */
  amountRemaining?: AmountRemaining | null | undefined;
  /**
   * The total amount that is already captured for this payment. Only available when this payment supports captures.
   */
  amountCaptured?: AmountCaptured | null | undefined;
  /**
   * The total amount that was charged back for this payment. Only available when the total charged back amount is not zero.
   */
  amountChargedBack?: AmountChargedBack | null | undefined;
  /**
   * This optional field will contain the approximate amount that will be settled to your account, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * Any amounts not settled by Mollie will not be reflected in this amount, e.g. PayPal or gift cards. If no amount is settled by Mollie the `settlementAmount` is omitted from the response.
   *
   * Please note that this amount might be recalculated and changed when the status of the payment changes. We suggest using the List balance transactions endpoint instead to get more accurate settlement amounts for your payments.
   */
  settlementAmount?: SettlementAmount | null | undefined;
  /**
   * The URL your customer will be redirected to after the payment process.
   *
   * @remarks
   *
   * It could make sense for the redirectUrl to contain a unique identifier – like your order ID – so you can show the right page referencing the order when your customer returns.
   *
   * The parameter is normally required, but can be omitted for recurring payments (`sequenceType: recurring`) and for Apple Pay payments with an `applePayPaymentToken`.
   */
  redirectUrl?: string | null | undefined;
  /**
   * The URL your customer will be redirected to when the customer explicitly cancels the payment. If this URL is not provided, the customer will be redirected to the `redirectUrl` instead — see above.
   *
   * @remarks
   *
   * Mollie will always give you status updates via webhooks, including for the canceled status. This parameter is therefore entirely optional, but can be useful when implementing a dedicated customer-facing flow to handle payment cancellations.
   */
  cancelUrl?: string | null | undefined;
  /**
   * The webhook URL where we will send payment status updates to.
   *
   * @remarks
   *
   * The webhookUrl is optional, but without a webhook you will miss out on important status changes to your payment.
   *
   * The webhookUrl must be reachable from Mollie's point of view, so you cannot use `localhost`. If you want to use webhook during development on `localhost`, you must use a tool like ngrok to have the webhooks delivered to your local machine.
   */
  webhookUrl?: string | null | undefined;
  /**
   * Optionally provide the order lines for the payment. Each line contains details such as a description of the item ordered and its price.
   *
   * @remarks
   *
   * All lines must have the same currency as the payment.
   */
  lines?: Array<GetPaymentLines> | null | undefined;
  /**
   * The customer's billing address details. We advise to provide these details to improve fraud protection and conversion. This is particularly relevant for card payments.
   */
  billingAddress?: GetPaymentBillingAddress | undefined;
  /**
   * The customer's shipping address details. We advise to provide these details to improve fraud protection and conversion. This is particularly relevant for card payments.
   */
  shippingAddress?: GetPaymentShippingAddress | undefined;
  /**
   * Allows you to preset the language to be used in the hosted payment pages shown to the customer. Setting a locale is highly recommended and will greatly improve your conversion rate. When this parameter is omitted the browser language will be used instead if supported by the payment method. You can provide any `xx_XX` format ISO 15897 locale, but our hosted payment pages currently only support the specified languages.
   *
   * @remarks
   *
   * For bank transfer payments specifically, the locale will determine the target bank account the customer has to transfer the money to. We have dedicated bank accounts for Belgium, Germany, and The Netherlands. Having the customer use a local bank account greatly increases the conversion and speed of payment.
   *
   * Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `fr_FR` `fr_BE` `de_DE` `de_AT` `de_CH` `es_ES` `ca_ES` `pt_PT` `it_IT` `nb_NO` `sv_SE` `fi_FI` `da_DK` `is_IS` `hu_HU` `pl_PL` `lv_LV` `lt_LT`
   */
  locale?: string | null | undefined;
  /**
   * This optional field contains your customer's ISO 3166-1 alpha-2 country code, detected by us during checkout. This field is omitted if the country code was not detected.
   */
  countryCode?: string | null | undefined;
  /**
   * Normally, a payment method screen is shown. However, when using this parameter, you can choose a specific payment method and your customer will skip the selection screen and is sent directly to the chosen payment method. The parameter enables you to fully integrate the payment method selection into your website.
   *
   * @remarks
   *
   * You can also specify the methods in an array. By doing so we will still show the payment method selection screen but will only show the methods specified in the array. For example, you can use this functionality to only show payment methods from a specific country to your customer `['bancontact', 'belfius']`.
   *
   * Possible values: `applepay` `bancontact` `banktransfer` `belfius` `creditcard` `directdebit` `eps` `giftcard` `giropay` `ideal` `kbc` `mybank` `paypal` `paysafecard` `przelewy24` `sofort`
   */
  method?: string | null | undefined;
  /**
   * **Only relevant for iDEAL, KBC/CBC, gift card, and voucher payments.**
   *
   * @remarks
   *
   * **⚠️ With the introduction of iDEAL 2 in 2025, this field will be ignored for iDEAL payments. For more information on the migration, refer to our [help center](https://help.mollie.com/hc/articles/19100313768338-iDEAL-2-0).**
   *
   * Some payment methods are a network of connected banks or card issuers. In these cases, after selecting the payment method, the customer may still need to select the appropriate issuer before the payment can proceed.
   *
   * We provide hosted issuer selection screens, but these screens can be skipped by providing the `issuer` via the API up front.
   *
   * The full list of issuers for a specific method can be retrieved via the Methods API by using the optional `issuers` include.
   *
   * A valid issuer for iDEAL is for example `ideal_INGBNL2A` (for ING Bank).
   */
  issuer?: string | null | undefined;
  /**
   * For digital goods in most jurisdictions, you must apply the VAT rate from your customer's country. Choose the VAT rates you have used for the order to ensure your customer's country matches the VAT country.
   *
   * @remarks
   *
   * Use this parameter to restrict the payment methods available to your customer to those from a single country.
   *
   * If available, the credit card method will still be offered, but only cards from the allowed country are accepted.
   *
   * The field expects a country code in ISO 3166-1 alpha-2 format, for example `NL`.
   */
  restrictPaymentMethodsToCountry?: string | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: string | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * By default, the customer's card or bank account is immediately charged when they complete the payment.
   *
   * Some payment methods also allow placing a hold on the card or bank account. This hold or 'authorization' can then at a later point either be 'captured' or canceled.
   *
   * To enable this way of working, set the capture mode to `manual` and capture the payment manually using the [Create capture endpoint](create-capture).
   *
   * Possible values: `automatic` `manual`
   */
  captureMode?: string | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * Some payment methods allow placing a hold on the card or bank account. This hold or 'authorization' can then at a later point either be 'captured' or canceled.
   *
   * By default, we charge the customer's card or bank account immediately when they complete the payment. If you set a capture delay however, we will delay the automatic capturing of the payment for the specified amount of time. For example `8 hours` or `2 days`.
   *
   * To schedule an automatic capture, the `captureMode` must be set to `automatic`.
   *
   * The maximum delay is 7 days (168 hours).
   *
   * Possible values: `...hours` `... days`
   */
  captureDelay?: string | null | undefined;
  /**
   * **Only relevant if you wish to manage authorization and capturing separately.**
   *
   * @remarks
   *
   * Indicates the date before which the payment needs to be captured, in ISO 8601 format. From this date onwards we can no longer guarantee a successful capture. The parameter is omitted if the payment is not authorized (yet).
   */
  captureBefore?: string | null | undefined;
  /**
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * @remarks
   *
   * If you use OAuth to create payments on a connected merchant's account, you can charge a fee using this `applicationFee` parameter. If the payment succeeds, the fee will be deducted from the merchant's balance and sent to your own account balance.
   *
   * If instead you want to split a payment on your own account between yourself and a connected merchant, refer to the `routing` parameter.
   */
  applicationFee?: GetPaymentApplicationFee | undefined;
  /**
   * *This functionality is not enabled by default. Reach out to our partner management team if you wish to use it.*
   *
   * @remarks
   *
   * With Mollie Connect you can charge fees on payments that your app is processing on behalf of other Mollie merchants.
   *
   * If you create payments on your own account that you want to split between yourself and one or more connected merchants, you can use this `routing` parameter to route the payment accordingly.
   *
   * The `routing` parameter should contain an array of objects, with each object describing the destination for a specific portion of the payment.
   *
   * It is not necessary to indicate in the array which portion goes to yourself. After all portions of the total payment amount have been routed, the amount left will be routed to the current organization automatically.
   *
   * If instead you use OAuth to create payments on a connected merchant's account, refer to the `applicationFee` parameter.
   */
  routing?: Array<GetPaymentRouting> | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * Indicate which part of a recurring sequence this payment is for.
   *
   * Recurring payments can only take place if a mandate is available. A common way to establish such a mandate is through a `first` payment. With a `first` payment, the customer agrees to automatic recurring charges taking place on their account in the future.
   *
   * If set to `recurring`, the customer's card is charged automatically.
   *
   * Defaults to `oneoff`, which is a regular non-recurring payment.
   *
   * For PayPal payments, recurring is only possible if your connected PayPal account allows it. You can call our [Methods API](list-methods) with parameter `sequenceType: first` to discover which payment methods on your account are set up correctly for recurring payments.
   *
   * Possible values: `oneoff` `first` `recurring`
   */
  sequenceType?: string | null | undefined;
  /**
   * **Only relevant for recurring payments.**
   *
   * @remarks
   *
   * When creating recurring payments, the ID of a specific [mandate](get-mandate) can be supplied to indicate which of the customer's accounts should be credited.
   */
  mandateId?: string | null | undefined;
  /**
   * The ID of the [customer](get-customer) the payment is being created for. This is used primarily for recurring payments, but can also be used on regular payments to enable single-click payments.
   *
   * @remarks
   *
   * If `sequenceType` is set to `recurring`, this field is required.
   */
  customerId?: string | null | undefined;
  /**
   * The identifier referring to the [profile](get-profile) this entity belongs to.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted in the creation request. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | null | undefined;
  /**
   * The identifier referring to the [settlement](get-settlement) this payment was settled with.
   */
  settlementId?: string | null | undefined;
  /**
   * If the payment was created for an [order](get-order), the ID of that order will be part of the response.
   */
  orderId?: string | null | undefined;
  /**
   * The payment's status. Refer to the documentation regarding statuses for more info about which statuses occur at what point.
   */
  status?: string | undefined;
  /**
   * Whether the payment can be canceled. This parameter is omitted if the payment reaches a final state.
   */
  isCancelable?: boolean | null | undefined;
  /**
   * An object containing payment details collected during the payment process. For example, details may include the customer's card or bank details and a payment reference. For the full list of details, please refer to the [method-specific parameters](extra-payment-parameters) guide.
   */
  details?: Details | null | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * The date and time the payment became authorized, in ISO 8601 format. This parameter is omitted if the payment is not authorized (yet).
   */
  authorizedAt?: string | null | undefined;
  /**
   * The date and time the payment became paid, in ISO 8601 format. This parameter is omitted if the payment is not completed (yet).
   */
  paidAt?: string | null | undefined;
  /**
   * The date and time the payment was canceled, in ISO 8601 format. This parameter is omitted if the payment is not  canceled (yet).
   */
  canceledAt?: string | null | undefined;
  /**
   * The date and time the payment will expire, in ISO 8601 format. This parameter is omitted if the payment can no longer expire.
   */
  expiresAt?: string | null | undefined;
  /**
   * The date and time the payment was expired, in ISO 8601 format. This parameter is omitted if the payment did not expire (yet).
   */
  expiredAt?: string | null | undefined;
  /**
   * The date and time the payment failed, in ISO 8601 format. This parameter is omitted if the payment did not fail (yet).
   */
  failedAt?: string | null | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetPaymentLinks | undefined;
};

/** @internal */
export const GetPaymentRequest$inboundSchema: z.ZodType<
  GetPaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  include: z.nullable(z.string()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type GetPaymentRequest$Outbound = {
  id: string;
  include?: string | null | undefined;
  embed?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const GetPaymentRequest$outboundSchema: z.ZodType<
  GetPaymentRequest$Outbound,
  z.ZodTypeDef,
  GetPaymentRequest
> = z.object({
  id: z.string(),
  include: z.nullable(z.string()).optional(),
  embed: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentRequest$ {
  /** @deprecated use `GetPaymentRequest$inboundSchema` instead. */
  export const inboundSchema = GetPaymentRequest$inboundSchema;
  /** @deprecated use `GetPaymentRequest$outboundSchema` instead. */
  export const outboundSchema = GetPaymentRequest$outboundSchema;
  /** @deprecated use `GetPaymentRequest$Outbound` instead. */
  export type Outbound = GetPaymentRequest$Outbound;
}

/** @internal */
export const GetPaymentAmount$inboundSchema: z.ZodType<
  GetPaymentAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentAmount$outboundSchema: z.ZodType<
  GetPaymentAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentAmount$ {
  /** @deprecated use `GetPaymentAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentAmount$inboundSchema;
  /** @deprecated use `GetPaymentAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentAmount$outboundSchema;
  /** @deprecated use `GetPaymentAmount$Outbound` instead. */
  export type Outbound = GetPaymentAmount$Outbound;
}

/** @internal */
export const AmountRefunded$inboundSchema: z.ZodType<
  AmountRefunded,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AmountRefunded$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AmountRefunded$outboundSchema: z.ZodType<
  AmountRefunded$Outbound,
  z.ZodTypeDef,
  AmountRefunded
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountRefunded$ {
  /** @deprecated use `AmountRefunded$inboundSchema` instead. */
  export const inboundSchema = AmountRefunded$inboundSchema;
  /** @deprecated use `AmountRefunded$outboundSchema` instead. */
  export const outboundSchema = AmountRefunded$outboundSchema;
  /** @deprecated use `AmountRefunded$Outbound` instead. */
  export type Outbound = AmountRefunded$Outbound;
}

/** @internal */
export const AmountRemaining$inboundSchema: z.ZodType<
  AmountRemaining,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AmountRemaining$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AmountRemaining$outboundSchema: z.ZodType<
  AmountRemaining$Outbound,
  z.ZodTypeDef,
  AmountRemaining
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountRemaining$ {
  /** @deprecated use `AmountRemaining$inboundSchema` instead. */
  export const inboundSchema = AmountRemaining$inboundSchema;
  /** @deprecated use `AmountRemaining$outboundSchema` instead. */
  export const outboundSchema = AmountRemaining$outboundSchema;
  /** @deprecated use `AmountRemaining$Outbound` instead. */
  export type Outbound = AmountRemaining$Outbound;
}

/** @internal */
export const AmountCaptured$inboundSchema: z.ZodType<
  AmountCaptured,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AmountCaptured$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AmountCaptured$outboundSchema: z.ZodType<
  AmountCaptured$Outbound,
  z.ZodTypeDef,
  AmountCaptured
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountCaptured$ {
  /** @deprecated use `AmountCaptured$inboundSchema` instead. */
  export const inboundSchema = AmountCaptured$inboundSchema;
  /** @deprecated use `AmountCaptured$outboundSchema` instead. */
  export const outboundSchema = AmountCaptured$outboundSchema;
  /** @deprecated use `AmountCaptured$Outbound` instead. */
  export type Outbound = AmountCaptured$Outbound;
}

/** @internal */
export const AmountChargedBack$inboundSchema: z.ZodType<
  AmountChargedBack,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type AmountChargedBack$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const AmountChargedBack$outboundSchema: z.ZodType<
  AmountChargedBack$Outbound,
  z.ZodTypeDef,
  AmountChargedBack
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountChargedBack$ {
  /** @deprecated use `AmountChargedBack$inboundSchema` instead. */
  export const inboundSchema = AmountChargedBack$inboundSchema;
  /** @deprecated use `AmountChargedBack$outboundSchema` instead. */
  export const outboundSchema = AmountChargedBack$outboundSchema;
  /** @deprecated use `AmountChargedBack$Outbound` instead. */
  export type Outbound = AmountChargedBack$Outbound;
}

/** @internal */
export const SettlementAmount$inboundSchema: z.ZodType<
  SettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type SettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const SettlementAmount$outboundSchema: z.ZodType<
  SettlementAmount$Outbound,
  z.ZodTypeDef,
  SettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SettlementAmount$ {
  /** @deprecated use `SettlementAmount$inboundSchema` instead. */
  export const inboundSchema = SettlementAmount$inboundSchema;
  /** @deprecated use `SettlementAmount$outboundSchema` instead. */
  export const outboundSchema = SettlementAmount$outboundSchema;
  /** @deprecated use `SettlementAmount$Outbound` instead. */
  export type Outbound = SettlementAmount$Outbound;
}

/** @internal */
export const GetPaymentUnitPrice$inboundSchema: z.ZodType<
  GetPaymentUnitPrice,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentUnitPrice$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentUnitPrice$outboundSchema: z.ZodType<
  GetPaymentUnitPrice$Outbound,
  z.ZodTypeDef,
  GetPaymentUnitPrice
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentUnitPrice$ {
  /** @deprecated use `GetPaymentUnitPrice$inboundSchema` instead. */
  export const inboundSchema = GetPaymentUnitPrice$inboundSchema;
  /** @deprecated use `GetPaymentUnitPrice$outboundSchema` instead. */
  export const outboundSchema = GetPaymentUnitPrice$outboundSchema;
  /** @deprecated use `GetPaymentUnitPrice$Outbound` instead. */
  export type Outbound = GetPaymentUnitPrice$Outbound;
}

/** @internal */
export const GetPaymentDiscountAmount$inboundSchema: z.ZodType<
  GetPaymentDiscountAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentDiscountAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentDiscountAmount$outboundSchema: z.ZodType<
  GetPaymentDiscountAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentDiscountAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentDiscountAmount$ {
  /** @deprecated use `GetPaymentDiscountAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentDiscountAmount$inboundSchema;
  /** @deprecated use `GetPaymentDiscountAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentDiscountAmount$outboundSchema;
  /** @deprecated use `GetPaymentDiscountAmount$Outbound` instead. */
  export type Outbound = GetPaymentDiscountAmount$Outbound;
}

/** @internal */
export const GetPaymentTotalAmount$inboundSchema: z.ZodType<
  GetPaymentTotalAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentTotalAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentTotalAmount$outboundSchema: z.ZodType<
  GetPaymentTotalAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentTotalAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentTotalAmount$ {
  /** @deprecated use `GetPaymentTotalAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentTotalAmount$inboundSchema;
  /** @deprecated use `GetPaymentTotalAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentTotalAmount$outboundSchema;
  /** @deprecated use `GetPaymentTotalAmount$Outbound` instead. */
  export type Outbound = GetPaymentTotalAmount$Outbound;
}

/** @internal */
export const GetPaymentVatAmount$inboundSchema: z.ZodType<
  GetPaymentVatAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentVatAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentVatAmount$outboundSchema: z.ZodType<
  GetPaymentVatAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentVatAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentVatAmount$ {
  /** @deprecated use `GetPaymentVatAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentVatAmount$inboundSchema;
  /** @deprecated use `GetPaymentVatAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentVatAmount$outboundSchema;
  /** @deprecated use `GetPaymentVatAmount$Outbound` instead. */
  export type Outbound = GetPaymentVatAmount$Outbound;
}

/** @internal */
export const GetPaymentLines$inboundSchema: z.ZodType<
  GetPaymentLines,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetPaymentUnitPrice$inboundSchema),
  discountAmount: z.lazy(() => GetPaymentDiscountAmount$inboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetPaymentTotalAmount$inboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetPaymentVatAmount$inboundSchema).optional(),
  sku: z.string().optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/** @internal */
export type GetPaymentLines$Outbound = {
  type?: string | undefined;
  description: string;
  quantity: number;
  quantityUnit?: string | undefined;
  unitPrice: GetPaymentUnitPrice$Outbound;
  discountAmount?: GetPaymentDiscountAmount$Outbound | undefined;
  totalAmount: GetPaymentTotalAmount$Outbound;
  vatRate?: string | undefined;
  vatAmount?: GetPaymentVatAmount$Outbound | undefined;
  sku?: string | undefined;
  imageUrl?: string | undefined;
  productUrl?: string | undefined;
};

/** @internal */
export const GetPaymentLines$outboundSchema: z.ZodType<
  GetPaymentLines$Outbound,
  z.ZodTypeDef,
  GetPaymentLines
> = z.object({
  type: z.string().optional(),
  description: z.string(),
  quantity: z.number().int(),
  quantityUnit: z.string().optional(),
  unitPrice: z.lazy(() => GetPaymentUnitPrice$outboundSchema),
  discountAmount: z.lazy(() => GetPaymentDiscountAmount$outboundSchema)
    .optional(),
  totalAmount: z.lazy(() => GetPaymentTotalAmount$outboundSchema),
  vatRate: z.string().optional(),
  vatAmount: z.lazy(() => GetPaymentVatAmount$outboundSchema).optional(),
  sku: z.string().optional(),
  imageUrl: z.string().optional(),
  productUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLines$ {
  /** @deprecated use `GetPaymentLines$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLines$inboundSchema;
  /** @deprecated use `GetPaymentLines$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLines$outboundSchema;
  /** @deprecated use `GetPaymentLines$Outbound` instead. */
  export type Outbound = GetPaymentLines$Outbound;
}

/** @internal */
export const GetPaymentBillingAddress$inboundSchema: z.ZodType<
  GetPaymentBillingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string(),
  region: z.string().optional(),
  country: z.string(),
});

/** @internal */
export type GetPaymentBillingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber: string;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city: string;
  region?: string | undefined;
  country: string;
};

/** @internal */
export const GetPaymentBillingAddress$outboundSchema: z.ZodType<
  GetPaymentBillingAddress$Outbound,
  z.ZodTypeDef,
  GetPaymentBillingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string(),
  region: z.string().optional(),
  country: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentBillingAddress$ {
  /** @deprecated use `GetPaymentBillingAddress$inboundSchema` instead. */
  export const inboundSchema = GetPaymentBillingAddress$inboundSchema;
  /** @deprecated use `GetPaymentBillingAddress$outboundSchema` instead. */
  export const outboundSchema = GetPaymentBillingAddress$outboundSchema;
  /** @deprecated use `GetPaymentBillingAddress$Outbound` instead. */
  export type Outbound = GetPaymentBillingAddress$Outbound;
}

/** @internal */
export const GetPaymentShippingAddress$inboundSchema: z.ZodType<
  GetPaymentShippingAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string(),
  region: z.string().optional(),
  country: z.string(),
});

/** @internal */
export type GetPaymentShippingAddress$Outbound = {
  title?: string | undefined;
  givenName?: string | undefined;
  familyName?: string | undefined;
  organizationName?: string | undefined;
  streetAndNumber: string;
  streetAdditional?: string | undefined;
  postalCode?: string | undefined;
  email?: string | undefined;
  phone?: string | undefined;
  city: string;
  region?: string | undefined;
  country: string;
};

/** @internal */
export const GetPaymentShippingAddress$outboundSchema: z.ZodType<
  GetPaymentShippingAddress$Outbound,
  z.ZodTypeDef,
  GetPaymentShippingAddress
> = z.object({
  title: z.string().optional(),
  givenName: z.string().optional(),
  familyName: z.string().optional(),
  organizationName: z.string().optional(),
  streetAndNumber: z.string(),
  streetAdditional: z.string().optional(),
  postalCode: z.string().optional(),
  email: z.string().optional(),
  phone: z.string().optional(),
  city: z.string(),
  region: z.string().optional(),
  country: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentShippingAddress$ {
  /** @deprecated use `GetPaymentShippingAddress$inboundSchema` instead. */
  export const inboundSchema = GetPaymentShippingAddress$inboundSchema;
  /** @deprecated use `GetPaymentShippingAddress$outboundSchema` instead. */
  export const outboundSchema = GetPaymentShippingAddress$outboundSchema;
  /** @deprecated use `GetPaymentShippingAddress$Outbound` instead. */
  export type Outbound = GetPaymentShippingAddress$Outbound;
}

/** @internal */
export const GetPaymentPaymentsAPIAmount$inboundSchema: z.ZodType<
  GetPaymentPaymentsAPIAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentPaymentsAPIAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentPaymentsAPIAmount$outboundSchema: z.ZodType<
  GetPaymentPaymentsAPIAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentPaymentsAPIAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentPaymentsAPIAmount$ {
  /** @deprecated use `GetPaymentPaymentsAPIAmount$inboundSchema` instead. */
  export const inboundSchema = GetPaymentPaymentsAPIAmount$inboundSchema;
  /** @deprecated use `GetPaymentPaymentsAPIAmount$outboundSchema` instead. */
  export const outboundSchema = GetPaymentPaymentsAPIAmount$outboundSchema;
  /** @deprecated use `GetPaymentPaymentsAPIAmount$Outbound` instead. */
  export type Outbound = GetPaymentPaymentsAPIAmount$Outbound;
}

/** @internal */
export const GetPaymentApplicationFee$inboundSchema: z.ZodType<
  GetPaymentApplicationFee,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetPaymentPaymentsAPIAmount$inboundSchema).optional(),
  description: z.string().optional(),
});

/** @internal */
export type GetPaymentApplicationFee$Outbound = {
  amount?: GetPaymentPaymentsAPIAmount$Outbound | undefined;
  description?: string | undefined;
};

/** @internal */
export const GetPaymentApplicationFee$outboundSchema: z.ZodType<
  GetPaymentApplicationFee$Outbound,
  z.ZodTypeDef,
  GetPaymentApplicationFee
> = z.object({
  amount: z.lazy(() => GetPaymentPaymentsAPIAmount$outboundSchema).optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentApplicationFee$ {
  /** @deprecated use `GetPaymentApplicationFee$inboundSchema` instead. */
  export const inboundSchema = GetPaymentApplicationFee$inboundSchema;
  /** @deprecated use `GetPaymentApplicationFee$outboundSchema` instead. */
  export const outboundSchema = GetPaymentApplicationFee$outboundSchema;
  /** @deprecated use `GetPaymentApplicationFee$Outbound` instead. */
  export type Outbound = GetPaymentApplicationFee$Outbound;
}

/** @internal */
export const GetPaymentPaymentsAPIResponseAmount$inboundSchema: z.ZodType<
  GetPaymentPaymentsAPIResponseAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetPaymentPaymentsAPIResponseAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetPaymentPaymentsAPIResponseAmount$outboundSchema: z.ZodType<
  GetPaymentPaymentsAPIResponseAmount$Outbound,
  z.ZodTypeDef,
  GetPaymentPaymentsAPIResponseAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentPaymentsAPIResponseAmount$ {
  /** @deprecated use `GetPaymentPaymentsAPIResponseAmount$inboundSchema` instead. */
  export const inboundSchema =
    GetPaymentPaymentsAPIResponseAmount$inboundSchema;
  /** @deprecated use `GetPaymentPaymentsAPIResponseAmount$outboundSchema` instead. */
  export const outboundSchema =
    GetPaymentPaymentsAPIResponseAmount$outboundSchema;
  /** @deprecated use `GetPaymentPaymentsAPIResponseAmount$Outbound` instead. */
  export type Outbound = GetPaymentPaymentsAPIResponseAmount$Outbound;
}

/** @internal */
export const GetPaymentDestination$inboundSchema: z.ZodType<
  GetPaymentDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  organizationId: z.string().optional(),
});

/** @internal */
export type GetPaymentDestination$Outbound = {
  type?: string | undefined;
  organizationId?: string | undefined;
};

/** @internal */
export const GetPaymentDestination$outboundSchema: z.ZodType<
  GetPaymentDestination$Outbound,
  z.ZodTypeDef,
  GetPaymentDestination
> = z.object({
  type: z.string().optional(),
  organizationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentDestination$ {
  /** @deprecated use `GetPaymentDestination$inboundSchema` instead. */
  export const inboundSchema = GetPaymentDestination$inboundSchema;
  /** @deprecated use `GetPaymentDestination$outboundSchema` instead. */
  export const outboundSchema = GetPaymentDestination$outboundSchema;
  /** @deprecated use `GetPaymentDestination$Outbound` instead. */
  export type Outbound = GetPaymentDestination$Outbound;
}

/** @internal */
export const GetPaymentRouting$inboundSchema: z.ZodType<
  GetPaymentRouting,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => GetPaymentPaymentsAPIResponseAmount$inboundSchema)
    .optional(),
  destination: z.lazy(() => GetPaymentDestination$inboundSchema).optional(),
  releaseDate: z.string().optional(),
});

/** @internal */
export type GetPaymentRouting$Outbound = {
  amount?: GetPaymentPaymentsAPIResponseAmount$Outbound | undefined;
  destination?: GetPaymentDestination$Outbound | undefined;
  releaseDate?: string | undefined;
};

/** @internal */
export const GetPaymentRouting$outboundSchema: z.ZodType<
  GetPaymentRouting$Outbound,
  z.ZodTypeDef,
  GetPaymentRouting
> = z.object({
  amount: z.lazy(() => GetPaymentPaymentsAPIResponseAmount$outboundSchema)
    .optional(),
  destination: z.lazy(() => GetPaymentDestination$outboundSchema).optional(),
  releaseDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentRouting$ {
  /** @deprecated use `GetPaymentRouting$inboundSchema` instead. */
  export const inboundSchema = GetPaymentRouting$inboundSchema;
  /** @deprecated use `GetPaymentRouting$outboundSchema` instead. */
  export const outboundSchema = GetPaymentRouting$outboundSchema;
  /** @deprecated use `GetPaymentRouting$Outbound` instead. */
  export type Outbound = GetPaymentRouting$Outbound;
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Details$Outbound = {};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

/** @internal */
export const GetPaymentSelf$inboundSchema: z.ZodType<
  GetPaymentSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetPaymentSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetPaymentSelf$outboundSchema: z.ZodType<
  GetPaymentSelf$Outbound,
  z.ZodTypeDef,
  GetPaymentSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentSelf$ {
  /** @deprecated use `GetPaymentSelf$inboundSchema` instead. */
  export const inboundSchema = GetPaymentSelf$inboundSchema;
  /** @deprecated use `GetPaymentSelf$outboundSchema` instead. */
  export const outboundSchema = GetPaymentSelf$outboundSchema;
  /** @deprecated use `GetPaymentSelf$Outbound` instead. */
  export type Outbound = GetPaymentSelf$Outbound;
}

/** @internal */
export const Checkout$inboundSchema: z.ZodType<
  Checkout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Checkout$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Checkout$outboundSchema: z.ZodType<
  Checkout$Outbound,
  z.ZodTypeDef,
  Checkout
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Checkout$ {
  /** @deprecated use `Checkout$inboundSchema` instead. */
  export const inboundSchema = Checkout$inboundSchema;
  /** @deprecated use `Checkout$outboundSchema` instead. */
  export const outboundSchema = Checkout$outboundSchema;
  /** @deprecated use `Checkout$Outbound` instead. */
  export type Outbound = Checkout$Outbound;
}

/** @internal */
export const MobileAppCheckout$inboundSchema: z.ZodType<
  MobileAppCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type MobileAppCheckout$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const MobileAppCheckout$outboundSchema: z.ZodType<
  MobileAppCheckout$Outbound,
  z.ZodTypeDef,
  MobileAppCheckout
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MobileAppCheckout$ {
  /** @deprecated use `MobileAppCheckout$inboundSchema` instead. */
  export const inboundSchema = MobileAppCheckout$inboundSchema;
  /** @deprecated use `MobileAppCheckout$outboundSchema` instead. */
  export const outboundSchema = MobileAppCheckout$outboundSchema;
  /** @deprecated use `MobileAppCheckout$Outbound` instead. */
  export type Outbound = MobileAppCheckout$Outbound;
}

/** @internal */
export const ChangePaymentState$inboundSchema: z.ZodType<
  ChangePaymentState,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ChangePaymentState$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ChangePaymentState$outboundSchema: z.ZodType<
  ChangePaymentState$Outbound,
  z.ZodTypeDef,
  ChangePaymentState
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangePaymentState$ {
  /** @deprecated use `ChangePaymentState$inboundSchema` instead. */
  export const inboundSchema = ChangePaymentState$inboundSchema;
  /** @deprecated use `ChangePaymentState$outboundSchema` instead. */
  export const outboundSchema = ChangePaymentState$outboundSchema;
  /** @deprecated use `ChangePaymentState$Outbound` instead. */
  export type Outbound = ChangePaymentState$Outbound;
}

/** @internal */
export const Dashboard$inboundSchema: z.ZodType<
  Dashboard,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Dashboard$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Dashboard$outboundSchema: z.ZodType<
  Dashboard$Outbound,
  z.ZodTypeDef,
  Dashboard
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Dashboard$ {
  /** @deprecated use `Dashboard$inboundSchema` instead. */
  export const inboundSchema = Dashboard$inboundSchema;
  /** @deprecated use `Dashboard$outboundSchema` instead. */
  export const outboundSchema = Dashboard$outboundSchema;
  /** @deprecated use `Dashboard$Outbound` instead. */
  export type Outbound = Dashboard$Outbound;
}

/** @internal */
export const Refunds$inboundSchema: z.ZodType<Refunds, z.ZodTypeDef, unknown> =
  z.object({
    href: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type Refunds$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Refunds$outboundSchema: z.ZodType<
  Refunds$Outbound,
  z.ZodTypeDef,
  Refunds
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refunds$ {
  /** @deprecated use `Refunds$inboundSchema` instead. */
  export const inboundSchema = Refunds$inboundSchema;
  /** @deprecated use `Refunds$outboundSchema` instead. */
  export const outboundSchema = Refunds$outboundSchema;
  /** @deprecated use `Refunds$Outbound` instead. */
  export type Outbound = Refunds$Outbound;
}

/** @internal */
export const Chargebacks$inboundSchema: z.ZodType<
  Chargebacks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Chargebacks$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Chargebacks$outboundSchema: z.ZodType<
  Chargebacks$Outbound,
  z.ZodTypeDef,
  Chargebacks
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Chargebacks$ {
  /** @deprecated use `Chargebacks$inboundSchema` instead. */
  export const inboundSchema = Chargebacks$inboundSchema;
  /** @deprecated use `Chargebacks$outboundSchema` instead. */
  export const outboundSchema = Chargebacks$outboundSchema;
  /** @deprecated use `Chargebacks$Outbound` instead. */
  export type Outbound = Chargebacks$Outbound;
}

/** @internal */
export const Captures$inboundSchema: z.ZodType<
  Captures,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Captures$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Captures$outboundSchema: z.ZodType<
  Captures$Outbound,
  z.ZodTypeDef,
  Captures
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Captures$ {
  /** @deprecated use `Captures$inboundSchema` instead. */
  export const inboundSchema = Captures$inboundSchema;
  /** @deprecated use `Captures$outboundSchema` instead. */
  export const outboundSchema = Captures$outboundSchema;
  /** @deprecated use `Captures$Outbound` instead. */
  export type Outbound = Captures$Outbound;
}

/** @internal */
export const Settlement$inboundSchema: z.ZodType<
  Settlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Settlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Settlement$outboundSchema: z.ZodType<
  Settlement$Outbound,
  z.ZodTypeDef,
  Settlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settlement$ {
  /** @deprecated use `Settlement$inboundSchema` instead. */
  export const inboundSchema = Settlement$inboundSchema;
  /** @deprecated use `Settlement$outboundSchema` instead. */
  export const outboundSchema = Settlement$outboundSchema;
  /** @deprecated use `Settlement$Outbound` instead. */
  export type Outbound = Settlement$Outbound;
}

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type Order$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}

/** @internal */
export const Terminal$inboundSchema: z.ZodType<
  Terminal,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Terminal$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Terminal$outboundSchema: z.ZodType<
  Terminal$Outbound,
  z.ZodTypeDef,
  Terminal
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Terminal$ {
  /** @deprecated use `Terminal$inboundSchema` instead. */
  export const inboundSchema = Terminal$inboundSchema;
  /** @deprecated use `Terminal$outboundSchema` instead. */
  export const outboundSchema = Terminal$outboundSchema;
  /** @deprecated use `Terminal$Outbound` instead. */
  export type Outbound = Terminal$Outbound;
}

/** @internal */
export const GetPaymentDocumentation$inboundSchema: z.ZodType<
  GetPaymentDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetPaymentDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetPaymentDocumentation$outboundSchema: z.ZodType<
  GetPaymentDocumentation$Outbound,
  z.ZodTypeDef,
  GetPaymentDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentDocumentation$ {
  /** @deprecated use `GetPaymentDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetPaymentDocumentation$inboundSchema;
  /** @deprecated use `GetPaymentDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetPaymentDocumentation$outboundSchema;
  /** @deprecated use `GetPaymentDocumentation$Outbound` instead. */
  export type Outbound = GetPaymentDocumentation$Outbound;
}

/** @internal */
export const GetPaymentLinks$inboundSchema: z.ZodType<
  GetPaymentLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetPaymentSelf$inboundSchema).optional(),
  checkout: z.nullable(z.lazy(() => Checkout$inboundSchema)).optional(),
  mobileAppCheckout: z.nullable(z.lazy(() => MobileAppCheckout$inboundSchema))
    .optional(),
  changePaymentState: z.nullable(z.lazy(() => ChangePaymentState$inboundSchema))
    .optional(),
  dashboard: z.lazy(() => Dashboard$inboundSchema).optional(),
  refunds: z.nullable(z.lazy(() => Refunds$inboundSchema)).optional(),
  chargebacks: z.lazy(() => Chargebacks$inboundSchema).optional(),
  captures: z.lazy(() => Captures$inboundSchema).optional(),
  settlement: z.nullable(z.lazy(() => Settlement$inboundSchema)).optional(),
  order: z.nullable(z.lazy(() => Order$inboundSchema)).optional(),
  terminal: z.nullable(z.lazy(() => Terminal$inboundSchema)).optional(),
  documentation: z.lazy(() => GetPaymentDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetPaymentLinks$Outbound = {
  self?: GetPaymentSelf$Outbound | undefined;
  checkout?: Checkout$Outbound | null | undefined;
  mobileAppCheckout?: MobileAppCheckout$Outbound | null | undefined;
  changePaymentState?: ChangePaymentState$Outbound | null | undefined;
  dashboard?: Dashboard$Outbound | undefined;
  refunds?: Refunds$Outbound | null | undefined;
  chargebacks?: Chargebacks$Outbound | undefined;
  captures?: Captures$Outbound | undefined;
  settlement?: Settlement$Outbound | null | undefined;
  order?: Order$Outbound | null | undefined;
  terminal?: Terminal$Outbound | null | undefined;
  documentation?: GetPaymentDocumentation$Outbound | undefined;
};

/** @internal */
export const GetPaymentLinks$outboundSchema: z.ZodType<
  GetPaymentLinks$Outbound,
  z.ZodTypeDef,
  GetPaymentLinks
> = z.object({
  self: z.lazy(() => GetPaymentSelf$outboundSchema).optional(),
  checkout: z.nullable(z.lazy(() => Checkout$outboundSchema)).optional(),
  mobileAppCheckout: z.nullable(z.lazy(() => MobileAppCheckout$outboundSchema))
    .optional(),
  changePaymentState: z.nullable(
    z.lazy(() => ChangePaymentState$outboundSchema),
  ).optional(),
  dashboard: z.lazy(() => Dashboard$outboundSchema).optional(),
  refunds: z.nullable(z.lazy(() => Refunds$outboundSchema)).optional(),
  chargebacks: z.lazy(() => Chargebacks$outboundSchema).optional(),
  captures: z.lazy(() => Captures$outboundSchema).optional(),
  settlement: z.nullable(z.lazy(() => Settlement$outboundSchema)).optional(),
  order: z.nullable(z.lazy(() => Order$outboundSchema)).optional(),
  terminal: z.nullable(z.lazy(() => Terminal$outboundSchema)).optional(),
  documentation: z.lazy(() => GetPaymentDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentLinks$ {
  /** @deprecated use `GetPaymentLinks$inboundSchema` instead. */
  export const inboundSchema = GetPaymentLinks$inboundSchema;
  /** @deprecated use `GetPaymentLinks$outboundSchema` instead. */
  export const outboundSchema = GetPaymentLinks$outboundSchema;
  /** @deprecated use `GetPaymentLinks$Outbound` instead. */
  export type Outbound = GetPaymentLinks$Outbound;
}

/** @internal */
export const GetPaymentResponseBody$inboundSchema: z.ZodType<
  GetPaymentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("payment"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetPaymentAmount$inboundSchema).optional(),
  amountRefunded: z.nullable(z.lazy(() => AmountRefunded$inboundSchema))
    .optional(),
  amountRemaining: z.nullable(z.lazy(() => AmountRemaining$inboundSchema))
    .optional(),
  amountCaptured: z.nullable(z.lazy(() => AmountCaptured$inboundSchema))
    .optional(),
  amountChargedBack: z.nullable(z.lazy(() => AmountChargedBack$inboundSchema))
    .optional(),
  settlementAmount: z.nullable(z.lazy(() => SettlementAmount$inboundSchema))
    .optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(z.lazy(() => GetPaymentLines$inboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => GetPaymentBillingAddress$inboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => GetPaymentShippingAddress$inboundSchema)
    .optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  issuer: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.string()).optional(),
  captureMode: z.nullable(z.string().default("automatic")),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.lazy(() => GetPaymentApplicationFee$inboundSchema)
    .optional(),
  routing: z.nullable(z.array(z.lazy(() => GetPaymentRouting$inboundSchema)))
    .optional(),
  sequenceType: z.nullable(z.string().default("oneoff")),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.lazy(() => Details$inboundSchema)).optional(),
  createdAt: z.string().optional(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  _links: z.lazy(() => GetPaymentLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetPaymentResponseBody$Outbound = {
  resource: string;
  id?: string | undefined;
  mode?: string | undefined;
  description?: string | undefined;
  amount?: GetPaymentAmount$Outbound | undefined;
  amountRefunded?: AmountRefunded$Outbound | null | undefined;
  amountRemaining?: AmountRemaining$Outbound | null | undefined;
  amountCaptured?: AmountCaptured$Outbound | null | undefined;
  amountChargedBack?: AmountChargedBack$Outbound | null | undefined;
  settlementAmount?: SettlementAmount$Outbound | null | undefined;
  redirectUrl?: string | null | undefined;
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  lines?: Array<GetPaymentLines$Outbound> | null | undefined;
  billingAddress?: GetPaymentBillingAddress$Outbound | undefined;
  shippingAddress?: GetPaymentShippingAddress$Outbound | undefined;
  locale?: string | null | undefined;
  countryCode?: string | null | undefined;
  method?: string | null | undefined;
  issuer?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  metadata?: string | null | undefined;
  captureMode: string | null;
  captureDelay?: string | null | undefined;
  captureBefore?: string | null | undefined;
  applicationFee?: GetPaymentApplicationFee$Outbound | undefined;
  routing?: Array<GetPaymentRouting$Outbound> | null | undefined;
  sequenceType: string | null;
  mandateId?: string | null | undefined;
  customerId?: string | null | undefined;
  profileId?: string | null | undefined;
  settlementId?: string | null | undefined;
  orderId?: string | null | undefined;
  status?: string | undefined;
  isCancelable?: boolean | null | undefined;
  details?: Details$Outbound | null | undefined;
  createdAt?: string | undefined;
  authorizedAt?: string | null | undefined;
  paidAt?: string | null | undefined;
  canceledAt?: string | null | undefined;
  expiresAt?: string | null | undefined;
  expiredAt?: string | null | undefined;
  failedAt?: string | null | undefined;
  _links?: GetPaymentLinks$Outbound | undefined;
};

/** @internal */
export const GetPaymentResponseBody$outboundSchema: z.ZodType<
  GetPaymentResponseBody$Outbound,
  z.ZodTypeDef,
  GetPaymentResponseBody
> = z.object({
  resource: z.string().default("payment"),
  id: z.string().optional(),
  mode: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetPaymentAmount$outboundSchema).optional(),
  amountRefunded: z.nullable(z.lazy(() => AmountRefunded$outboundSchema))
    .optional(),
  amountRemaining: z.nullable(z.lazy(() => AmountRemaining$outboundSchema))
    .optional(),
  amountCaptured: z.nullable(z.lazy(() => AmountCaptured$outboundSchema))
    .optional(),
  amountChargedBack: z.nullable(z.lazy(() => AmountChargedBack$outboundSchema))
    .optional(),
  settlementAmount: z.nullable(z.lazy(() => SettlementAmount$outboundSchema))
    .optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  lines: z.nullable(z.array(z.lazy(() => GetPaymentLines$outboundSchema)))
    .optional(),
  billingAddress: z.lazy(() => GetPaymentBillingAddress$outboundSchema)
    .optional(),
  shippingAddress: z.lazy(() => GetPaymentShippingAddress$outboundSchema)
    .optional(),
  locale: z.nullable(z.string()).optional(),
  countryCode: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  issuer: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.string()).optional(),
  captureMode: z.nullable(z.string().default("automatic")),
  captureDelay: z.nullable(z.string()).optional(),
  captureBefore: z.nullable(z.string()).optional(),
  applicationFee: z.lazy(() => GetPaymentApplicationFee$outboundSchema)
    .optional(),
  routing: z.nullable(z.array(z.lazy(() => GetPaymentRouting$outboundSchema)))
    .optional(),
  sequenceType: z.nullable(z.string().default("oneoff")),
  mandateId: z.nullable(z.string()).optional(),
  customerId: z.nullable(z.string()).optional(),
  profileId: z.nullable(z.string()).optional(),
  settlementId: z.nullable(z.string()).optional(),
  orderId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  isCancelable: z.nullable(z.boolean()).optional(),
  details: z.nullable(z.lazy(() => Details$outboundSchema)).optional(),
  createdAt: z.string().optional(),
  authorizedAt: z.nullable(z.string()).optional(),
  paidAt: z.nullable(z.string()).optional(),
  canceledAt: z.nullable(z.string()).optional(),
  expiresAt: z.nullable(z.string()).optional(),
  expiredAt: z.nullable(z.string()).optional(),
  failedAt: z.nullable(z.string()).optional(),
  links: z.lazy(() => GetPaymentLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPaymentResponseBody$ {
  /** @deprecated use `GetPaymentResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetPaymentResponseBody$inboundSchema;
  /** @deprecated use `GetPaymentResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetPaymentResponseBody$outboundSchema;
  /** @deprecated use `GetPaymentResponseBody$Outbound` instead. */
  export type Outbound = GetPaymentResponseBody$Outbound;
}
