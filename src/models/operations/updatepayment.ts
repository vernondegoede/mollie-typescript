/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UpdatePaymentRequestBody = {
  description?: string | null | undefined;
  /**
   * Can be updated while the payment is in an `open` state.
   */
  redirectUrl?: string | null | undefined;
  /**
   * Can be updated while the payment is in an `open` state.
   */
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  metadata?: string | null | undefined;
  /**
   * Can be updated while no payment method has been chosen yet.
   */
  method?: string | null | undefined;
  locale?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type UpdatePaymentRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  requestBody?: UpdatePaymentRequestBody | undefined;
};

/** @internal */
export const UpdatePaymentRequestBody$inboundSchema: z.ZodType<
  UpdatePaymentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.nullable(z.string()).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type UpdatePaymentRequestBody$Outbound = {
  description?: string | null | undefined;
  redirectUrl?: string | null | undefined;
  cancelUrl?: string | null | undefined;
  webhookUrl?: string | null | undefined;
  metadata?: string | null | undefined;
  method?: string | null | undefined;
  locale?: string | null | undefined;
  restrictPaymentMethodsToCountry?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const UpdatePaymentRequestBody$outboundSchema: z.ZodType<
  UpdatePaymentRequestBody$Outbound,
  z.ZodTypeDef,
  UpdatePaymentRequestBody
> = z.object({
  description: z.nullable(z.string()).optional(),
  redirectUrl: z.nullable(z.string()).optional(),
  cancelUrl: z.nullable(z.string()).optional(),
  webhookUrl: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.string()).optional(),
  method: z.nullable(z.string()).optional(),
  locale: z.nullable(z.string()).optional(),
  restrictPaymentMethodsToCountry: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentRequestBody$ {
  /** @deprecated use `UpdatePaymentRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentRequestBody$inboundSchema;
  /** @deprecated use `UpdatePaymentRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentRequestBody$outboundSchema;
  /** @deprecated use `UpdatePaymentRequestBody$Outbound` instead. */
  export type Outbound = UpdatePaymentRequestBody$Outbound;
}

/** @internal */
export const UpdatePaymentRequest$inboundSchema: z.ZodType<
  UpdatePaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdatePaymentRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdatePaymentRequest$Outbound = {
  id: string;
  RequestBody?: UpdatePaymentRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdatePaymentRequest$outboundSchema: z.ZodType<
  UpdatePaymentRequest$Outbound,
  z.ZodTypeDef,
  UpdatePaymentRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => UpdatePaymentRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePaymentRequest$ {
  /** @deprecated use `UpdatePaymentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePaymentRequest$inboundSchema;
  /** @deprecated use `UpdatePaymentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePaymentRequest$outboundSchema;
  /** @deprecated use `UpdatePaymentRequest$Outbound` instead. */
  export type Outbound = UpdatePaymentRequest$Outbound;
}
