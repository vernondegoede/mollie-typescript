/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type EnableMethodIssuerRequestBody = {
  /**
   * When enabling a voucher issuer, an inbetween party may be involved which you have a contract with. Provide the contract ID for the first time you enable an issuer via this contractor.
   *
   * @remarks
   *
   * You can update the contract ID as long as it is not approved yet, by repeating the API call with a different contract ID.
   */
  contractId?: string | null | undefined;
};

export type EnableMethodIssuerRequest = {
  /**
   * Provide the ID of the related profile.
   */
  profileId: string;
  /**
   * Provide the ID of the related payment method.
   */
  methodId: string;
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  requestBody?: EnableMethodIssuerRequestBody | undefined;
};

/**
 * Information regarding the *contractor*. Only relevant for `voucher` issuers.
 */
export type Contractor = {
  id?: string | undefined;
  name?: string | undefined;
  contractId?: string | undefined;
};

/**
 * URLs of images representing the payment method issuer.
 */
export type EnableMethodIssuerImage = {
  /**
   * The URL pointing to an icon of 32 by 24 pixels.
   */
  size1x?: string | undefined;
  /**
   * The URL pointing to an icon of 64 by 48 pixels.
   */
  size2x?: string | undefined;
  /**
   * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can scale to any desired size without compromising visual quality.
   */
  svg?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type EnableMethodIssuerSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type EnableMethodIssuerDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type EnableMethodIssuerLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: EnableMethodIssuerSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: EnableMethodIssuerDocumentation | undefined;
};

/**
 * The payment method issuer object.
 */
export type EnableMethodIssuerResponseBody = {
  /**
   * Indicates the response contains a payment method issuer object. Will always contain the string `issuer` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The unique identifier of the payment method issuer.
   */
  id?: string | undefined;
  /**
   * The full name of the payment method issuer.
   */
  description?: string | undefined;
  /**
   * Information regarding the *contractor*. Only relevant for `voucher` issuers.
   */
  contractor?: Contractor | undefined;
  /**
   * The status of the issuer. Only relevant for `voucher` issuers.
   *
   * @remarks
   *
   * If the status is `pending-issuer`, an additional action from your side may be required with the issuer.
   *
   * Possible values: `activated` `pending-issuer`
   */
  status?: string | null | undefined;
  /**
   * URLs of images representing the payment method issuer.
   */
  image?: EnableMethodIssuerImage | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: EnableMethodIssuerLinks | undefined;
};

/** @internal */
export const EnableMethodIssuerRequestBody$inboundSchema: z.ZodType<
  EnableMethodIssuerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractId: z.nullable(z.string()).optional(),
});

/** @internal */
export type EnableMethodIssuerRequestBody$Outbound = {
  contractId?: string | null | undefined;
};

/** @internal */
export const EnableMethodIssuerRequestBody$outboundSchema: z.ZodType<
  EnableMethodIssuerRequestBody$Outbound,
  z.ZodTypeDef,
  EnableMethodIssuerRequestBody
> = z.object({
  contractId: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableMethodIssuerRequestBody$ {
  /** @deprecated use `EnableMethodIssuerRequestBody$inboundSchema` instead. */
  export const inboundSchema = EnableMethodIssuerRequestBody$inboundSchema;
  /** @deprecated use `EnableMethodIssuerRequestBody$outboundSchema` instead. */
  export const outboundSchema = EnableMethodIssuerRequestBody$outboundSchema;
  /** @deprecated use `EnableMethodIssuerRequestBody$Outbound` instead. */
  export type Outbound = EnableMethodIssuerRequestBody$Outbound;
}

/** @internal */
export const EnableMethodIssuerRequest$inboundSchema: z.ZodType<
  EnableMethodIssuerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  profileId: z.string(),
  methodId: z.string(),
  id: z.string(),
  RequestBody: z.lazy(() => EnableMethodIssuerRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type EnableMethodIssuerRequest$Outbound = {
  profileId: string;
  methodId: string;
  id: string;
  RequestBody?: EnableMethodIssuerRequestBody$Outbound | undefined;
};

/** @internal */
export const EnableMethodIssuerRequest$outboundSchema: z.ZodType<
  EnableMethodIssuerRequest$Outbound,
  z.ZodTypeDef,
  EnableMethodIssuerRequest
> = z.object({
  profileId: z.string(),
  methodId: z.string(),
  id: z.string(),
  requestBody: z.lazy(() => EnableMethodIssuerRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableMethodIssuerRequest$ {
  /** @deprecated use `EnableMethodIssuerRequest$inboundSchema` instead. */
  export const inboundSchema = EnableMethodIssuerRequest$inboundSchema;
  /** @deprecated use `EnableMethodIssuerRequest$outboundSchema` instead. */
  export const outboundSchema = EnableMethodIssuerRequest$outboundSchema;
  /** @deprecated use `EnableMethodIssuerRequest$Outbound` instead. */
  export type Outbound = EnableMethodIssuerRequest$Outbound;
}

/** @internal */
export const Contractor$inboundSchema: z.ZodType<
  Contractor,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  contractId: z.string().optional(),
});

/** @internal */
export type Contractor$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
  contractId?: string | undefined;
};

/** @internal */
export const Contractor$outboundSchema: z.ZodType<
  Contractor$Outbound,
  z.ZodTypeDef,
  Contractor
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  contractId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contractor$ {
  /** @deprecated use `Contractor$inboundSchema` instead. */
  export const inboundSchema = Contractor$inboundSchema;
  /** @deprecated use `Contractor$outboundSchema` instead. */
  export const outboundSchema = Contractor$outboundSchema;
  /** @deprecated use `Contractor$Outbound` instead. */
  export type Outbound = Contractor$Outbound;
}

/** @internal */
export const EnableMethodIssuerImage$inboundSchema: z.ZodType<
  EnableMethodIssuerImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/** @internal */
export type EnableMethodIssuerImage$Outbound = {
  size1x?: string | undefined;
  size2x?: string | undefined;
  svg?: string | undefined;
};

/** @internal */
export const EnableMethodIssuerImage$outboundSchema: z.ZodType<
  EnableMethodIssuerImage$Outbound,
  z.ZodTypeDef,
  EnableMethodIssuerImage
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableMethodIssuerImage$ {
  /** @deprecated use `EnableMethodIssuerImage$inboundSchema` instead. */
  export const inboundSchema = EnableMethodIssuerImage$inboundSchema;
  /** @deprecated use `EnableMethodIssuerImage$outboundSchema` instead. */
  export const outboundSchema = EnableMethodIssuerImage$outboundSchema;
  /** @deprecated use `EnableMethodIssuerImage$Outbound` instead. */
  export type Outbound = EnableMethodIssuerImage$Outbound;
}

/** @internal */
export const EnableMethodIssuerSelf$inboundSchema: z.ZodType<
  EnableMethodIssuerSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type EnableMethodIssuerSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const EnableMethodIssuerSelf$outboundSchema: z.ZodType<
  EnableMethodIssuerSelf$Outbound,
  z.ZodTypeDef,
  EnableMethodIssuerSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableMethodIssuerSelf$ {
  /** @deprecated use `EnableMethodIssuerSelf$inboundSchema` instead. */
  export const inboundSchema = EnableMethodIssuerSelf$inboundSchema;
  /** @deprecated use `EnableMethodIssuerSelf$outboundSchema` instead. */
  export const outboundSchema = EnableMethodIssuerSelf$outboundSchema;
  /** @deprecated use `EnableMethodIssuerSelf$Outbound` instead. */
  export type Outbound = EnableMethodIssuerSelf$Outbound;
}

/** @internal */
export const EnableMethodIssuerDocumentation$inboundSchema: z.ZodType<
  EnableMethodIssuerDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type EnableMethodIssuerDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const EnableMethodIssuerDocumentation$outboundSchema: z.ZodType<
  EnableMethodIssuerDocumentation$Outbound,
  z.ZodTypeDef,
  EnableMethodIssuerDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableMethodIssuerDocumentation$ {
  /** @deprecated use `EnableMethodIssuerDocumentation$inboundSchema` instead. */
  export const inboundSchema = EnableMethodIssuerDocumentation$inboundSchema;
  /** @deprecated use `EnableMethodIssuerDocumentation$outboundSchema` instead. */
  export const outboundSchema = EnableMethodIssuerDocumentation$outboundSchema;
  /** @deprecated use `EnableMethodIssuerDocumentation$Outbound` instead. */
  export type Outbound = EnableMethodIssuerDocumentation$Outbound;
}

/** @internal */
export const EnableMethodIssuerLinks$inboundSchema: z.ZodType<
  EnableMethodIssuerLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => EnableMethodIssuerSelf$inboundSchema).optional(),
  documentation: z.lazy(() => EnableMethodIssuerDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type EnableMethodIssuerLinks$Outbound = {
  self?: EnableMethodIssuerSelf$Outbound | undefined;
  documentation?: EnableMethodIssuerDocumentation$Outbound | undefined;
};

/** @internal */
export const EnableMethodIssuerLinks$outboundSchema: z.ZodType<
  EnableMethodIssuerLinks$Outbound,
  z.ZodTypeDef,
  EnableMethodIssuerLinks
> = z.object({
  self: z.lazy(() => EnableMethodIssuerSelf$outboundSchema).optional(),
  documentation: z.lazy(() => EnableMethodIssuerDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableMethodIssuerLinks$ {
  /** @deprecated use `EnableMethodIssuerLinks$inboundSchema` instead. */
  export const inboundSchema = EnableMethodIssuerLinks$inboundSchema;
  /** @deprecated use `EnableMethodIssuerLinks$outboundSchema` instead. */
  export const outboundSchema = EnableMethodIssuerLinks$outboundSchema;
  /** @deprecated use `EnableMethodIssuerLinks$Outbound` instead. */
  export type Outbound = EnableMethodIssuerLinks$Outbound;
}

/** @internal */
export const EnableMethodIssuerResponseBody$inboundSchema: z.ZodType<
  EnableMethodIssuerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("issuer"),
  id: z.string().optional(),
  description: z.string().optional(),
  contractor: z.lazy(() => Contractor$inboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  image: z.lazy(() => EnableMethodIssuerImage$inboundSchema).optional(),
  _links: z.lazy(() => EnableMethodIssuerLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type EnableMethodIssuerResponseBody$Outbound = {
  resource: string;
  id?: string | undefined;
  description?: string | undefined;
  contractor?: Contractor$Outbound | undefined;
  status?: string | null | undefined;
  image?: EnableMethodIssuerImage$Outbound | undefined;
  _links?: EnableMethodIssuerLinks$Outbound | undefined;
};

/** @internal */
export const EnableMethodIssuerResponseBody$outboundSchema: z.ZodType<
  EnableMethodIssuerResponseBody$Outbound,
  z.ZodTypeDef,
  EnableMethodIssuerResponseBody
> = z.object({
  resource: z.string().default("issuer"),
  id: z.string().optional(),
  description: z.string().optional(),
  contractor: z.lazy(() => Contractor$outboundSchema).optional(),
  status: z.nullable(z.string()).optional(),
  image: z.lazy(() => EnableMethodIssuerImage$outboundSchema).optional(),
  links: z.lazy(() => EnableMethodIssuerLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnableMethodIssuerResponseBody$ {
  /** @deprecated use `EnableMethodIssuerResponseBody$inboundSchema` instead. */
  export const inboundSchema = EnableMethodIssuerResponseBody$inboundSchema;
  /** @deprecated use `EnableMethodIssuerResponseBody$outboundSchema` instead. */
  export const outboundSchema = EnableMethodIssuerResponseBody$outboundSchema;
  /** @deprecated use `EnableMethodIssuerResponseBody$Outbound` instead. */
  export type Outbound = EnableMethodIssuerResponseBody$Outbound;
}
