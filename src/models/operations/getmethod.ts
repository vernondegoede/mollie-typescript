/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GetMethodRequest = {
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * Passing a locale will translate the payment method name in the corresponding language.
   *
   * @remarks
   *
   * Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE` `es_ES` `ca_ES` `pt_PT` `it_IT` `nb_NO` `sv_SE` `fi_FI` `da_DK` `is_IS` `hu_HU` `pl_PL` `lv_LV` `lt_LT`
   */
  locale?: string | undefined;
  /**
   * If provided, the `minimumAmount` and `maximumAmount` will be converted to the given currency. An error is returned if the currency is not supported by the payment method.
   */
  currency?: string | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to retrieve the payment method for.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `issuers`: Include issuer details such as which iDEAL or gift card issuers are available.
   * * `pricing`: Include pricing for the payment method.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The minimum payment amount required to use this payment method.
 */
export type MinimumAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
 */
export type MaximumAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * URLs of images representing the payment method.
 */
export type Image = {
  /**
   * The URL pointing to an icon of 32 by 24 pixels.
   */
  size1x?: string | undefined;
  /**
   * The URL pointing to an icon of 64 by 48 pixels.
   */
  size2x?: string | undefined;
  /**
   * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can scale to any desired size without compromising visual quality.
   */
  svg?: string | undefined;
};

/**
 * The fixed price charged per payment.
 */
export type Fixed = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type Pricing = {
  /**
   * A description of what the pricing applies to. For example, a specific country (`The Netherlands`) or a category of cards (`American Express`). If a `locale` is provided, the description may be translated.
   */
  description?: string | undefined;
  /**
   * The fixed price charged per payment.
   */
  fixed?: Fixed | undefined;
  /**
   * The variable price charged per payment, as a percentage string.
   */
  variable?: string | undefined;
  /**
   * Only present for credit card pricing. It will correspond with the `feeRegion` of credit card payments as returned in the [Payments API](get-payment).
   */
  feeRegion?: string | undefined;
};

/**
 * URLs of images representing the issuer.
 */
export type GetMethodImage = {
  /**
   * The URL pointing to an icon of 32 by 24 pixels.
   */
  size1x?: string | undefined;
  /**
   * The URL pointing to an icon of 64 by 48 pixels.
   */
  size2x?: string | undefined;
  /**
   * The URL pointing to a vector version of the icon. Usage of this format is preferred, since the icon can scale to any desired size without compromising visual quality.
   */
  svg?: string | undefined;
};

export type Issuers = {
  resource?: string | undefined;
  id?: string | undefined;
  /**
   * The full name of the issuer.
   */
  name?: string | undefined;
  /**
   * URLs of images representing the issuer.
   */
  image?: GetMethodImage | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetMethodSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetMethodDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetMethodLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetMethodSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetMethodDocumentation | undefined;
};

/**
 * The payment method object.
 */
export type GetMethodResponseBody = {
  /**
   * Indicates the response contains a payment method object. Will always contain the string `method` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The unique identifier of the payment method. When used during [payment creation](create-payment), the payment method selection screen will be skipped.
   *
   * @remarks
   *
   * Possible values: `applepay` `bancontact` `banktransfer` `belfius` `billie` `creditcard` `directdebit` `eps` `giftcard` `giropay` `ideal` `in3` `kbc` `klarna` `klarnapaylater` `klarnapaynow` `klarnasliceit` `mybank` `paypal` `paysafecard` `przelewy24` `sofort` `twint` `voucher`
   */
  id?: string | undefined;
  /**
   * The full name of the payment method.
   *
   * @remarks
   *
   * If a `locale` parameter is provided, the name is translated to the given locale if possible.
   */
  description?: string | undefined;
  /**
   * The minimum payment amount required to use this payment method.
   */
  minimumAmount?: MinimumAmount | undefined;
  /**
   * The maximum payment amount allowed when using this payment method. If there is no method-specific maximum, `null` is returned instead.
   */
  maximumAmount?: MaximumAmount | null | undefined;
  /**
   * URLs of images representing the payment method.
   */
  image?: Image | undefined;
  /**
   * The payment method's activation status for this profile.
   *
   * @remarks
   *
   * Possible values:
   * * `activated`: The payment method is activated and ready for use.
   * * `pending-boarding`: Mollie is waiting for you to finish onboarding in the Merchant Dashboard before the payment method can be activated.
   * * `pending-review`: Mollie needs to review your request for this payment method before it can be activated.
   * * `pending-external`: Activation of this payment method relies on you taking action with an external party, for example signing up with PayPal or a giftcard issuer.
   * * `rejected`: Your request for this payment method was rejected. Whenever Mollie rejects such a request, you will always be informed via email.
   * * `null`: This payment method was not requested.
   */
  status?: string | undefined;
  /**
   * **Optional include.** Array of objects describing the pricing configuration applicable for this payment method on your account.
   */
  pricing?: Array<Pricing> | undefined;
  /**
   * **Optional include.** Array of objects for each 'issuer' that is available for this payment method. Only relevant for iDEAL, KBC/CBC, gift cards, and vouchers.
   */
  issuers?: Array<Issuers> | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetMethodLinks | undefined;
};

/** @internal */
export const GetMethodRequest$inboundSchema: z.ZodType<
  GetMethodRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  locale: z.string().optional(),
  currency: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type GetMethodRequest$Outbound = {
  id: string;
  locale?: string | undefined;
  currency?: string | undefined;
  profileId?: string | undefined;
  include?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const GetMethodRequest$outboundSchema: z.ZodType<
  GetMethodRequest$Outbound,
  z.ZodTypeDef,
  GetMethodRequest
> = z.object({
  id: z.string(),
  locale: z.string().optional(),
  currency: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodRequest$ {
  /** @deprecated use `GetMethodRequest$inboundSchema` instead. */
  export const inboundSchema = GetMethodRequest$inboundSchema;
  /** @deprecated use `GetMethodRequest$outboundSchema` instead. */
  export const outboundSchema = GetMethodRequest$outboundSchema;
  /** @deprecated use `GetMethodRequest$Outbound` instead. */
  export type Outbound = GetMethodRequest$Outbound;
}

/** @internal */
export const MinimumAmount$inboundSchema: z.ZodType<
  MinimumAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type MinimumAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const MinimumAmount$outboundSchema: z.ZodType<
  MinimumAmount$Outbound,
  z.ZodTypeDef,
  MinimumAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MinimumAmount$ {
  /** @deprecated use `MinimumAmount$inboundSchema` instead. */
  export const inboundSchema = MinimumAmount$inboundSchema;
  /** @deprecated use `MinimumAmount$outboundSchema` instead. */
  export const outboundSchema = MinimumAmount$outboundSchema;
  /** @deprecated use `MinimumAmount$Outbound` instead. */
  export type Outbound = MinimumAmount$Outbound;
}

/** @internal */
export const MaximumAmount$inboundSchema: z.ZodType<
  MaximumAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type MaximumAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const MaximumAmount$outboundSchema: z.ZodType<
  MaximumAmount$Outbound,
  z.ZodTypeDef,
  MaximumAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaximumAmount$ {
  /** @deprecated use `MaximumAmount$inboundSchema` instead. */
  export const inboundSchema = MaximumAmount$inboundSchema;
  /** @deprecated use `MaximumAmount$outboundSchema` instead. */
  export const outboundSchema = MaximumAmount$outboundSchema;
  /** @deprecated use `MaximumAmount$Outbound` instead. */
  export type Outbound = MaximumAmount$Outbound;
}

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
  .object({
    size1x: z.string().optional(),
    size2x: z.string().optional(),
    svg: z.string().optional(),
  });

/** @internal */
export type Image$Outbound = {
  size1x?: string | undefined;
  size2x?: string | undefined;
  svg?: string | undefined;
};

/** @internal */
export const Image$outboundSchema: z.ZodType<
  Image$Outbound,
  z.ZodTypeDef,
  Image
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
  /** @deprecated use `Image$inboundSchema` instead. */
  export const inboundSchema = Image$inboundSchema;
  /** @deprecated use `Image$outboundSchema` instead. */
  export const outboundSchema = Image$outboundSchema;
  /** @deprecated use `Image$Outbound` instead. */
  export type Outbound = Image$Outbound;
}

/** @internal */
export const Fixed$inboundSchema: z.ZodType<Fixed, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string(),
    value: z.string(),
  });

/** @internal */
export type Fixed$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const Fixed$outboundSchema: z.ZodType<
  Fixed$Outbound,
  z.ZodTypeDef,
  Fixed
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fixed$ {
  /** @deprecated use `Fixed$inboundSchema` instead. */
  export const inboundSchema = Fixed$inboundSchema;
  /** @deprecated use `Fixed$outboundSchema` instead. */
  export const outboundSchema = Fixed$outboundSchema;
  /** @deprecated use `Fixed$Outbound` instead. */
  export type Outbound = Fixed$Outbound;
}

/** @internal */
export const Pricing$inboundSchema: z.ZodType<Pricing, z.ZodTypeDef, unknown> =
  z.object({
    description: z.string().optional(),
    fixed: z.lazy(() => Fixed$inboundSchema).optional(),
    variable: z.string().optional(),
    feeRegion: z.string().optional(),
  });

/** @internal */
export type Pricing$Outbound = {
  description?: string | undefined;
  fixed?: Fixed$Outbound | undefined;
  variable?: string | undefined;
  feeRegion?: string | undefined;
};

/** @internal */
export const Pricing$outboundSchema: z.ZodType<
  Pricing$Outbound,
  z.ZodTypeDef,
  Pricing
> = z.object({
  description: z.string().optional(),
  fixed: z.lazy(() => Fixed$outboundSchema).optional(),
  variable: z.string().optional(),
  feeRegion: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pricing$ {
  /** @deprecated use `Pricing$inboundSchema` instead. */
  export const inboundSchema = Pricing$inboundSchema;
  /** @deprecated use `Pricing$outboundSchema` instead. */
  export const outboundSchema = Pricing$outboundSchema;
  /** @deprecated use `Pricing$Outbound` instead. */
  export type Outbound = Pricing$Outbound;
}

/** @internal */
export const GetMethodImage$inboundSchema: z.ZodType<
  GetMethodImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/** @internal */
export type GetMethodImage$Outbound = {
  size1x?: string | undefined;
  size2x?: string | undefined;
  svg?: string | undefined;
};

/** @internal */
export const GetMethodImage$outboundSchema: z.ZodType<
  GetMethodImage$Outbound,
  z.ZodTypeDef,
  GetMethodImage
> = z.object({
  size1x: z.string().optional(),
  size2x: z.string().optional(),
  svg: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodImage$ {
  /** @deprecated use `GetMethodImage$inboundSchema` instead. */
  export const inboundSchema = GetMethodImage$inboundSchema;
  /** @deprecated use `GetMethodImage$outboundSchema` instead. */
  export const outboundSchema = GetMethodImage$outboundSchema;
  /** @deprecated use `GetMethodImage$Outbound` instead. */
  export type Outbound = GetMethodImage$Outbound;
}

/** @internal */
export const Issuers$inboundSchema: z.ZodType<Issuers, z.ZodTypeDef, unknown> =
  z.object({
    resource: z.string().default("issuer"),
    id: z.string().optional(),
    name: z.string().optional(),
    image: z.lazy(() => GetMethodImage$inboundSchema).optional(),
  });

/** @internal */
export type Issuers$Outbound = {
  resource: string;
  id?: string | undefined;
  name?: string | undefined;
  image?: GetMethodImage$Outbound | undefined;
};

/** @internal */
export const Issuers$outboundSchema: z.ZodType<
  Issuers$Outbound,
  z.ZodTypeDef,
  Issuers
> = z.object({
  resource: z.string().default("issuer"),
  id: z.string().optional(),
  name: z.string().optional(),
  image: z.lazy(() => GetMethodImage$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issuers$ {
  /** @deprecated use `Issuers$inboundSchema` instead. */
  export const inboundSchema = Issuers$inboundSchema;
  /** @deprecated use `Issuers$outboundSchema` instead. */
  export const outboundSchema = Issuers$outboundSchema;
  /** @deprecated use `Issuers$Outbound` instead. */
  export type Outbound = Issuers$Outbound;
}

/** @internal */
export const GetMethodSelf$inboundSchema: z.ZodType<
  GetMethodSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetMethodSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetMethodSelf$outboundSchema: z.ZodType<
  GetMethodSelf$Outbound,
  z.ZodTypeDef,
  GetMethodSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodSelf$ {
  /** @deprecated use `GetMethodSelf$inboundSchema` instead. */
  export const inboundSchema = GetMethodSelf$inboundSchema;
  /** @deprecated use `GetMethodSelf$outboundSchema` instead. */
  export const outboundSchema = GetMethodSelf$outboundSchema;
  /** @deprecated use `GetMethodSelf$Outbound` instead. */
  export type Outbound = GetMethodSelf$Outbound;
}

/** @internal */
export const GetMethodDocumentation$inboundSchema: z.ZodType<
  GetMethodDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetMethodDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetMethodDocumentation$outboundSchema: z.ZodType<
  GetMethodDocumentation$Outbound,
  z.ZodTypeDef,
  GetMethodDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodDocumentation$ {
  /** @deprecated use `GetMethodDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetMethodDocumentation$inboundSchema;
  /** @deprecated use `GetMethodDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetMethodDocumentation$outboundSchema;
  /** @deprecated use `GetMethodDocumentation$Outbound` instead. */
  export type Outbound = GetMethodDocumentation$Outbound;
}

/** @internal */
export const GetMethodLinks$inboundSchema: z.ZodType<
  GetMethodLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetMethodSelf$inboundSchema).optional(),
  documentation: z.lazy(() => GetMethodDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetMethodLinks$Outbound = {
  self?: GetMethodSelf$Outbound | undefined;
  documentation?: GetMethodDocumentation$Outbound | undefined;
};

/** @internal */
export const GetMethodLinks$outboundSchema: z.ZodType<
  GetMethodLinks$Outbound,
  z.ZodTypeDef,
  GetMethodLinks
> = z.object({
  self: z.lazy(() => GetMethodSelf$outboundSchema).optional(),
  documentation: z.lazy(() => GetMethodDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodLinks$ {
  /** @deprecated use `GetMethodLinks$inboundSchema` instead. */
  export const inboundSchema = GetMethodLinks$inboundSchema;
  /** @deprecated use `GetMethodLinks$outboundSchema` instead. */
  export const outboundSchema = GetMethodLinks$outboundSchema;
  /** @deprecated use `GetMethodLinks$Outbound` instead. */
  export type Outbound = GetMethodLinks$Outbound;
}

/** @internal */
export const GetMethodResponseBody$inboundSchema: z.ZodType<
  GetMethodResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("method"),
  id: z.string().optional(),
  description: z.string().optional(),
  minimumAmount: z.lazy(() => MinimumAmount$inboundSchema).optional(),
  maximumAmount: z.nullable(z.lazy(() => MaximumAmount$inboundSchema))
    .optional(),
  image: z.lazy(() => Image$inboundSchema).optional(),
  status: z.string().optional(),
  pricing: z.array(z.lazy(() => Pricing$inboundSchema)).optional(),
  issuers: z.array(z.lazy(() => Issuers$inboundSchema)).optional(),
  _links: z.lazy(() => GetMethodLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetMethodResponseBody$Outbound = {
  resource: string;
  id?: string | undefined;
  description?: string | undefined;
  minimumAmount?: MinimumAmount$Outbound | undefined;
  maximumAmount?: MaximumAmount$Outbound | null | undefined;
  image?: Image$Outbound | undefined;
  status?: string | undefined;
  pricing?: Array<Pricing$Outbound> | undefined;
  issuers?: Array<Issuers$Outbound> | undefined;
  _links?: GetMethodLinks$Outbound | undefined;
};

/** @internal */
export const GetMethodResponseBody$outboundSchema: z.ZodType<
  GetMethodResponseBody$Outbound,
  z.ZodTypeDef,
  GetMethodResponseBody
> = z.object({
  resource: z.string().default("method"),
  id: z.string().optional(),
  description: z.string().optional(),
  minimumAmount: z.lazy(() => MinimumAmount$outboundSchema).optional(),
  maximumAmount: z.nullable(z.lazy(() => MaximumAmount$outboundSchema))
    .optional(),
  image: z.lazy(() => Image$outboundSchema).optional(),
  status: z.string().optional(),
  pricing: z.array(z.lazy(() => Pricing$outboundSchema)).optional(),
  issuers: z.array(z.lazy(() => Issuers$outboundSchema)).optional(),
  links: z.lazy(() => GetMethodLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMethodResponseBody$ {
  /** @deprecated use `GetMethodResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetMethodResponseBody$inboundSchema;
  /** @deprecated use `GetMethodResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetMethodResponseBody$outboundSchema;
  /** @deprecated use `GetMethodResponseBody$Outbound` instead. */
  export type Outbound = GetMethodResponseBody$Outbound;
}
