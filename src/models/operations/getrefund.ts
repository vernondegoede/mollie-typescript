/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type GetRefundRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide the ID of the item you want to perform this operation on.
   */
  id: string;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `payment`: Include the payment this refund was created for.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
 */
export type GetRefundAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
 *
 * @remarks
 *
 * The amount is a **negative** amount.
 *
 * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
 *
 * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
 *
 * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
 */
export type GetRefundSettlementAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetRefundSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [payment](get-payment) that this refund belongs to.
 */
export type Payment = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
 */
export type GetRefundSettlement = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type GetRefundDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
 */
export type GetRefundLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: GetRefundSelf | undefined;
  /**
   * The API resource URL of the [payment](get-payment) that this refund belongs to.
   */
  payment?: Payment | undefined;
  /**
   * The API resource URL of the [settlement](get-settlement) this refund has been settled with. Not present if not yet settled.
   */
  settlement?: GetRefundSettlement | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: GetRefundDocumentation | undefined;
};

/**
 * The payment object.
 */
export type GetRefundResponseBody = {
  /**
   * Indicates the response contains a refund object. Will always contain the string `refund` for this endpoint.
   */
  resource?: string | undefined;
  /**
   * The identifier uniquely referring to this refund. Mollie assigns this identifier at refund creation time. Mollie will always refer to the refund by this ID. Example: `re_4qqhO89gsT`.
   */
  id?: string | undefined;
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
   */
  amount?: GetRefundAmount | undefined;
  /**
   * This optional field will contain the approximate amount that will be deducted from your account balance, converted to the currency your account is settled in.
   *
   * @remarks
   *
   * The amount is a **negative** amount.
   *
   * If the refund is not directly processed by Mollie, for example for PayPal refunds, the settlement amount will be zero.
   *
   * Since the field contains an estimated amount during refund processing, it may change over time. For example, while the refund is queued the settlement amount is likely not yet available.
   *
   * To retrieve accurate settlement amounts we recommend using the [List balance transactions endpoint](list-balance-transactions) instead.
   */
  settlementAmount?: GetRefundSettlementAmount | null | undefined;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: string | null | undefined;
  /**
   * The unique identifier of the payment this refund was created for. For example: `tr_7UhSN1zuXS`. The full payment object can be retrieved via the payment URL in the `_links` object.
   */
  paymentId?: string | undefined;
  /**
   * The identifier referring to the settlement this refund was settled with. For example, `stl_BkEjN2eBb`. This field is omitted if the refund is not settled (yet).
   */
  settlementId?: string | null | undefined;
  /**
   * Refunds may take some time to get confirmed. For a full overview of possible states, see the guide on refund statuses.
   */
  status?: string | undefined;
  /**
   * The entity's date and time of creation, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
   */
  createdAt?: string | undefined;
  /**
   * An object with several relevant URLs. Every URL object will contain an `href` and a `type` field.
   */
  links?: GetRefundLinks | undefined;
};

/** @internal */
export const GetRefundRequest$inboundSchema: z.ZodType<
  GetRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  id: z.string(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type GetRefundRequest$Outbound = {
  paymentId: string;
  id: string;
  include?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const GetRefundRequest$outboundSchema: z.ZodType<
  GetRefundRequest$Outbound,
  z.ZodTypeDef,
  GetRefundRequest
> = z.object({
  paymentId: z.string(),
  id: z.string(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundRequest$ {
  /** @deprecated use `GetRefundRequest$inboundSchema` instead. */
  export const inboundSchema = GetRefundRequest$inboundSchema;
  /** @deprecated use `GetRefundRequest$outboundSchema` instead. */
  export const outboundSchema = GetRefundRequest$outboundSchema;
  /** @deprecated use `GetRefundRequest$Outbound` instead. */
  export type Outbound = GetRefundRequest$Outbound;
}

/** @internal */
export const GetRefundAmount$inboundSchema: z.ZodType<
  GetRefundAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetRefundAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetRefundAmount$outboundSchema: z.ZodType<
  GetRefundAmount$Outbound,
  z.ZodTypeDef,
  GetRefundAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundAmount$ {
  /** @deprecated use `GetRefundAmount$inboundSchema` instead. */
  export const inboundSchema = GetRefundAmount$inboundSchema;
  /** @deprecated use `GetRefundAmount$outboundSchema` instead. */
  export const outboundSchema = GetRefundAmount$outboundSchema;
  /** @deprecated use `GetRefundAmount$Outbound` instead. */
  export type Outbound = GetRefundAmount$Outbound;
}

/** @internal */
export const GetRefundSettlementAmount$inboundSchema: z.ZodType<
  GetRefundSettlementAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type GetRefundSettlementAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const GetRefundSettlementAmount$outboundSchema: z.ZodType<
  GetRefundSettlementAmount$Outbound,
  z.ZodTypeDef,
  GetRefundSettlementAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundSettlementAmount$ {
  /** @deprecated use `GetRefundSettlementAmount$inboundSchema` instead. */
  export const inboundSchema = GetRefundSettlementAmount$inboundSchema;
  /** @deprecated use `GetRefundSettlementAmount$outboundSchema` instead. */
  export const outboundSchema = GetRefundSettlementAmount$outboundSchema;
  /** @deprecated use `GetRefundSettlementAmount$Outbound` instead. */
  export type Outbound = GetRefundSettlementAmount$Outbound;
}

/** @internal */
export const GetRefundSelf$inboundSchema: z.ZodType<
  GetRefundSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetRefundSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetRefundSelf$outboundSchema: z.ZodType<
  GetRefundSelf$Outbound,
  z.ZodTypeDef,
  GetRefundSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundSelf$ {
  /** @deprecated use `GetRefundSelf$inboundSchema` instead. */
  export const inboundSchema = GetRefundSelf$inboundSchema;
  /** @deprecated use `GetRefundSelf$outboundSchema` instead. */
  export const outboundSchema = GetRefundSelf$outboundSchema;
  /** @deprecated use `GetRefundSelf$Outbound` instead. */
  export type Outbound = GetRefundSelf$Outbound;
}

/** @internal */
export const Payment$inboundSchema: z.ZodType<Payment, z.ZodTypeDef, unknown> =
  z.object({
    href: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type Payment$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Payment$outboundSchema: z.ZodType<
  Payment$Outbound,
  z.ZodTypeDef,
  Payment
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payment$ {
  /** @deprecated use `Payment$inboundSchema` instead. */
  export const inboundSchema = Payment$inboundSchema;
  /** @deprecated use `Payment$outboundSchema` instead. */
  export const outboundSchema = Payment$outboundSchema;
  /** @deprecated use `Payment$Outbound` instead. */
  export type Outbound = Payment$Outbound;
}

/** @internal */
export const GetRefundSettlement$inboundSchema: z.ZodType<
  GetRefundSettlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetRefundSettlement$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetRefundSettlement$outboundSchema: z.ZodType<
  GetRefundSettlement$Outbound,
  z.ZodTypeDef,
  GetRefundSettlement
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundSettlement$ {
  /** @deprecated use `GetRefundSettlement$inboundSchema` instead. */
  export const inboundSchema = GetRefundSettlement$inboundSchema;
  /** @deprecated use `GetRefundSettlement$outboundSchema` instead. */
  export const outboundSchema = GetRefundSettlement$outboundSchema;
  /** @deprecated use `GetRefundSettlement$Outbound` instead. */
  export type Outbound = GetRefundSettlement$Outbound;
}

/** @internal */
export const GetRefundDocumentation$inboundSchema: z.ZodType<
  GetRefundDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type GetRefundDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const GetRefundDocumentation$outboundSchema: z.ZodType<
  GetRefundDocumentation$Outbound,
  z.ZodTypeDef,
  GetRefundDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundDocumentation$ {
  /** @deprecated use `GetRefundDocumentation$inboundSchema` instead. */
  export const inboundSchema = GetRefundDocumentation$inboundSchema;
  /** @deprecated use `GetRefundDocumentation$outboundSchema` instead. */
  export const outboundSchema = GetRefundDocumentation$outboundSchema;
  /** @deprecated use `GetRefundDocumentation$Outbound` instead. */
  export type Outbound = GetRefundDocumentation$Outbound;
}

/** @internal */
export const GetRefundLinks$inboundSchema: z.ZodType<
  GetRefundLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => GetRefundSelf$inboundSchema).optional(),
  payment: z.lazy(() => Payment$inboundSchema).optional(),
  settlement: z.nullable(z.lazy(() => GetRefundSettlement$inboundSchema))
    .optional(),
  documentation: z.lazy(() => GetRefundDocumentation$inboundSchema).optional(),
});

/** @internal */
export type GetRefundLinks$Outbound = {
  self?: GetRefundSelf$Outbound | undefined;
  payment?: Payment$Outbound | undefined;
  settlement?: GetRefundSettlement$Outbound | null | undefined;
  documentation?: GetRefundDocumentation$Outbound | undefined;
};

/** @internal */
export const GetRefundLinks$outboundSchema: z.ZodType<
  GetRefundLinks$Outbound,
  z.ZodTypeDef,
  GetRefundLinks
> = z.object({
  self: z.lazy(() => GetRefundSelf$outboundSchema).optional(),
  payment: z.lazy(() => Payment$outboundSchema).optional(),
  settlement: z.nullable(z.lazy(() => GetRefundSettlement$outboundSchema))
    .optional(),
  documentation: z.lazy(() => GetRefundDocumentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundLinks$ {
  /** @deprecated use `GetRefundLinks$inboundSchema` instead. */
  export const inboundSchema = GetRefundLinks$inboundSchema;
  /** @deprecated use `GetRefundLinks$outboundSchema` instead. */
  export const outboundSchema = GetRefundLinks$outboundSchema;
  /** @deprecated use `GetRefundLinks$Outbound` instead. */
  export type Outbound = GetRefundLinks$Outbound;
}

/** @internal */
export const GetRefundResponseBody$inboundSchema: z.ZodType<
  GetRefundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetRefundAmount$inboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => GetRefundSettlementAmount$inboundSchema),
  ).optional(),
  metadata: z.nullable(z.string()).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  _links: z.lazy(() => GetRefundLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetRefundResponseBody$Outbound = {
  resource: string;
  id?: string | undefined;
  description?: string | undefined;
  amount?: GetRefundAmount$Outbound | undefined;
  settlementAmount?: GetRefundSettlementAmount$Outbound | null | undefined;
  metadata?: string | null | undefined;
  paymentId?: string | undefined;
  settlementId?: string | null | undefined;
  status?: string | undefined;
  createdAt?: string | undefined;
  _links?: GetRefundLinks$Outbound | undefined;
};

/** @internal */
export const GetRefundResponseBody$outboundSchema: z.ZodType<
  GetRefundResponseBody$Outbound,
  z.ZodTypeDef,
  GetRefundResponseBody
> = z.object({
  resource: z.string().default("refund"),
  id: z.string().optional(),
  description: z.string().optional(),
  amount: z.lazy(() => GetRefundAmount$outboundSchema).optional(),
  settlementAmount: z.nullable(
    z.lazy(() => GetRefundSettlementAmount$outboundSchema),
  ).optional(),
  metadata: z.nullable(z.string()).optional(),
  paymentId: z.string().optional(),
  settlementId: z.nullable(z.string()).optional(),
  status: z.string().optional(),
  createdAt: z.string().optional(),
  links: z.lazy(() => GetRefundLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRefundResponseBody$ {
  /** @deprecated use `GetRefundResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetRefundResponseBody$inboundSchema;
  /** @deprecated use `GetRefundResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetRefundResponseBody$outboundSchema;
  /** @deprecated use `GetRefundResponseBody$Outbound` instead. */
  export type Outbound = GetRefundResponseBody$Outbound;
}
