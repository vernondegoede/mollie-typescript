/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type QueryParamAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListMethodsRequest = {
  /**
   * Set this parameter to `first` to only return the enabled methods that can be used for the first payment of a recurring sequence.
   *
   * @remarks
   *
   * Set it to `recurring` to only return enabled methods that can be used for recurring payments or subscriptions.
   *
   * Possible values: `oneoff` `first` `recurring` (default: `oneoff`)
   */
  sequenceType?: string | undefined;
  /**
   * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
   *
   * @remarks
   *
   * Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE` `es_ES` `ca_ES` `pt_PT` `it_IT` `nb_NO` `sv_SE` `fi_FI` `da_DK` `is_IS` `hu_HU` `pl_PL` `lv_LV` `lt_LT`
   */
  locale?: string | undefined;
  /**
   * If supplied, only payment methods that support the amount and currency are returned.
   *
   * @remarks
   *
   * Example: `/v2/methods?amount[value]=100.00&amount[currency]=USD`
   */
  amount?: QueryParamAmount | undefined;
  /**
   * Indicate if you will use the result for the [Create order](create-order) or the [Create payment](create-payment) endpoint.
   *
   * @remarks
   *
   * When passing the value `orders`, the result will include payment methods that are only available for payments created via the Orders API.
   *
   * Possible values: `payments` `orders` (default: `payments`)
   */
  resource?: string | undefined;
  /**
   * The country taken from your customer's billing address in ISO 3166-1 alpha-2 format. This parameter can be used to check whether your customer is eligible for certain payment methods, for example for Klarna.
   *
   * @remarks
   *
   * Example: `/v2/methods?resource=orders&billingCountry=DE`
   */
  billingCountry?: string | undefined;
  /**
   * A comma-separated list of the wallets you support in your checkout. Wallets often require wallet specific code to check if they are available on the shoppers device, hence the need to indicate your support.
   *
   * @remarks
   *
   * Possible values: `applepay`
   */
  includeWallets?: string | undefined;
  /**
   * A comma-separated list of the order line categories you support in your checkout. The available categories can be found in the [Create order endpoint](create-order) documentation.
   *
   * @remarks
   *
   * Example: `/v2/methods?resource=orders&orderLineCategories=eco,meal`
   */
  orderLineCategories?: string | undefined;
  /**
   * The identifier referring to the [profile](get-profile) you wish to retrieve the payment methods for.
   *
   * @remarks
   *
   * Most API credentials are linked to a single profile. In these cases the `profileId` can be omitted. For organization-level credentials such as OAuth access tokens however, the `profileId` parameter is required.
   */
  profileId?: string | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `issuers`: Include issuer details such as which iDEAL or gift card issuers are available.
   * * `pricing`: Include pricing for each payment method.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type Methods = {};

export type ListMethodsEmbedded = {
  /**
   * An array of payment method objects. For a complete reference of the payment method object, refer to the [Get payment method endpoint](get-method) documentation.
   */
  methods?: Array<Methods> | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListMethodsSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListMethodsDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

export type ListMethodsLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: ListMethodsSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListMethodsDocumentation | undefined;
};

/**
 * A list of payment method objects. For a complete reference of the payment method object, refer to the [Get payment method endpoint](get-method) documentation.
 */
export type ListMethodsResponseBody = {
  /**
   * The number of payment method objects in this result set. Results are **not** paginated.
   */
  count?: number | undefined;
  embedded?: ListMethodsEmbedded | undefined;
  links?: ListMethodsLinks | undefined;
};

/** @internal */
export const QueryParamAmount$inboundSchema: z.ZodType<
  QueryParamAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type QueryParamAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const QueryParamAmount$outboundSchema: z.ZodType<
  QueryParamAmount$Outbound,
  z.ZodTypeDef,
  QueryParamAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamAmount$ {
  /** @deprecated use `QueryParamAmount$inboundSchema` instead. */
  export const inboundSchema = QueryParamAmount$inboundSchema;
  /** @deprecated use `QueryParamAmount$outboundSchema` instead. */
  export const outboundSchema = QueryParamAmount$outboundSchema;
  /** @deprecated use `QueryParamAmount$Outbound` instead. */
  export type Outbound = QueryParamAmount$Outbound;
}

/** @internal */
export const ListMethodsRequest$inboundSchema: z.ZodType<
  ListMethodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sequenceType: z.string().optional(),
  locale: z.string().optional(),
  amount: z.lazy(() => QueryParamAmount$inboundSchema).optional(),
  resource: z.string().optional(),
  billingCountry: z.string().optional(),
  includeWallets: z.string().optional(),
  orderLineCategories: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type ListMethodsRequest$Outbound = {
  sequenceType?: string | undefined;
  locale?: string | undefined;
  amount?: QueryParamAmount$Outbound | undefined;
  resource?: string | undefined;
  billingCountry?: string | undefined;
  includeWallets?: string | undefined;
  orderLineCategories?: string | undefined;
  profileId?: string | undefined;
  include?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const ListMethodsRequest$outboundSchema: z.ZodType<
  ListMethodsRequest$Outbound,
  z.ZodTypeDef,
  ListMethodsRequest
> = z.object({
  sequenceType: z.string().optional(),
  locale: z.string().optional(),
  amount: z.lazy(() => QueryParamAmount$outboundSchema).optional(),
  resource: z.string().optional(),
  billingCountry: z.string().optional(),
  includeWallets: z.string().optional(),
  orderLineCategories: z.string().optional(),
  profileId: z.string().optional(),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsRequest$ {
  /** @deprecated use `ListMethodsRequest$inboundSchema` instead. */
  export const inboundSchema = ListMethodsRequest$inboundSchema;
  /** @deprecated use `ListMethodsRequest$outboundSchema` instead. */
  export const outboundSchema = ListMethodsRequest$outboundSchema;
  /** @deprecated use `ListMethodsRequest$Outbound` instead. */
  export type Outbound = ListMethodsRequest$Outbound;
}

/** @internal */
export const Methods$inboundSchema: z.ZodType<Methods, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Methods$Outbound = {};

/** @internal */
export const Methods$outboundSchema: z.ZodType<
  Methods$Outbound,
  z.ZodTypeDef,
  Methods
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Methods$ {
  /** @deprecated use `Methods$inboundSchema` instead. */
  export const inboundSchema = Methods$inboundSchema;
  /** @deprecated use `Methods$outboundSchema` instead. */
  export const outboundSchema = Methods$outboundSchema;
  /** @deprecated use `Methods$Outbound` instead. */
  export type Outbound = Methods$Outbound;
}

/** @internal */
export const ListMethodsEmbedded$inboundSchema: z.ZodType<
  ListMethodsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  methods: z.array(z.lazy(() => Methods$inboundSchema)).optional(),
});

/** @internal */
export type ListMethodsEmbedded$Outbound = {
  methods?: Array<Methods$Outbound> | undefined;
};

/** @internal */
export const ListMethodsEmbedded$outboundSchema: z.ZodType<
  ListMethodsEmbedded$Outbound,
  z.ZodTypeDef,
  ListMethodsEmbedded
> = z.object({
  methods: z.array(z.lazy(() => Methods$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsEmbedded$ {
  /** @deprecated use `ListMethodsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListMethodsEmbedded$inboundSchema;
  /** @deprecated use `ListMethodsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListMethodsEmbedded$outboundSchema;
  /** @deprecated use `ListMethodsEmbedded$Outbound` instead. */
  export type Outbound = ListMethodsEmbedded$Outbound;
}

/** @internal */
export const ListMethodsSelf$inboundSchema: z.ZodType<
  ListMethodsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListMethodsSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListMethodsSelf$outboundSchema: z.ZodType<
  ListMethodsSelf$Outbound,
  z.ZodTypeDef,
  ListMethodsSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsSelf$ {
  /** @deprecated use `ListMethodsSelf$inboundSchema` instead. */
  export const inboundSchema = ListMethodsSelf$inboundSchema;
  /** @deprecated use `ListMethodsSelf$outboundSchema` instead. */
  export const outboundSchema = ListMethodsSelf$outboundSchema;
  /** @deprecated use `ListMethodsSelf$Outbound` instead. */
  export type Outbound = ListMethodsSelf$Outbound;
}

/** @internal */
export const ListMethodsDocumentation$inboundSchema: z.ZodType<
  ListMethodsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListMethodsDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListMethodsDocumentation$outboundSchema: z.ZodType<
  ListMethodsDocumentation$Outbound,
  z.ZodTypeDef,
  ListMethodsDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsDocumentation$ {
  /** @deprecated use `ListMethodsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListMethodsDocumentation$inboundSchema;
  /** @deprecated use `ListMethodsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListMethodsDocumentation$outboundSchema;
  /** @deprecated use `ListMethodsDocumentation$Outbound` instead. */
  export type Outbound = ListMethodsDocumentation$Outbound;
}

/** @internal */
export const ListMethodsLinks$inboundSchema: z.ZodType<
  ListMethodsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListMethodsSelf$inboundSchema).optional(),
  documentation: z.lazy(() => ListMethodsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListMethodsLinks$Outbound = {
  self?: ListMethodsSelf$Outbound | undefined;
  documentation?: ListMethodsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListMethodsLinks$outboundSchema: z.ZodType<
  ListMethodsLinks$Outbound,
  z.ZodTypeDef,
  ListMethodsLinks
> = z.object({
  self: z.lazy(() => ListMethodsSelf$outboundSchema).optional(),
  documentation: z.lazy(() => ListMethodsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsLinks$ {
  /** @deprecated use `ListMethodsLinks$inboundSchema` instead. */
  export const inboundSchema = ListMethodsLinks$inboundSchema;
  /** @deprecated use `ListMethodsLinks$outboundSchema` instead. */
  export const outboundSchema = ListMethodsLinks$outboundSchema;
  /** @deprecated use `ListMethodsLinks$Outbound` instead. */
  export type Outbound = ListMethodsLinks$Outbound;
}

/** @internal */
export const ListMethodsResponseBody$inboundSchema: z.ZodType<
  ListMethodsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListMethodsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListMethodsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListMethodsResponseBody$Outbound = {
  count?: number | undefined;
  _embedded?: ListMethodsEmbedded$Outbound | undefined;
  _links?: ListMethodsLinks$Outbound | undefined;
};

/** @internal */
export const ListMethodsResponseBody$outboundSchema: z.ZodType<
  ListMethodsResponseBody$Outbound,
  z.ZodTypeDef,
  ListMethodsResponseBody
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListMethodsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListMethodsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListMethodsResponseBody$ {
  /** @deprecated use `ListMethodsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListMethodsResponseBody$inboundSchema;
  /** @deprecated use `ListMethodsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListMethodsResponseBody$outboundSchema;
  /** @deprecated use `ListMethodsResponseBody$Outbound` instead. */
  export type Outbound = ListMethodsResponseBody$Outbound;
}
