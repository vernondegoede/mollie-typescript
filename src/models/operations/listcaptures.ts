/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ListCapturesRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `payment`: Include the payments that the captures were created for.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type ListCapturesCaptures = {};

export type ListCapturesEmbedded = {
  /**
   * An array of capture objects. For a complete reference of the capture object, refer to the [Get capture endpoint](get-capture) documentation.
   */
  captures?: Array<ListCapturesCaptures> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListCapturesSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The previous set of items, if available.
 */
export type ListCapturesPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListCapturesNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListCapturesDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListCapturesLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListCapturesSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListCapturesPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListCapturesNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListCapturesDocumentation | undefined;
};

/**
 * A list of capture objects. For a complete reference of the capture object, refer to the [Get capture endpoint](get-capture) documentation.
 */
export type ListCapturesResponseBody = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListCapturesEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListCapturesLinks | undefined;
};

/** @internal */
export const ListCapturesRequest$inboundSchema: z.ZodType<
  ListCapturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type ListCapturesRequest$Outbound = {
  paymentId: string;
  from?: string | null | undefined;
  limit: number | null;
  include?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const ListCapturesRequest$outboundSchema: z.ZodType<
  ListCapturesRequest$Outbound,
  z.ZodTypeDef,
  ListCapturesRequest
> = z.object({
  paymentId: z.string(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesRequest$ {
  /** @deprecated use `ListCapturesRequest$inboundSchema` instead. */
  export const inboundSchema = ListCapturesRequest$inboundSchema;
  /** @deprecated use `ListCapturesRequest$outboundSchema` instead. */
  export const outboundSchema = ListCapturesRequest$outboundSchema;
  /** @deprecated use `ListCapturesRequest$Outbound` instead. */
  export type Outbound = ListCapturesRequest$Outbound;
}

/** @internal */
export const ListCapturesCaptures$inboundSchema: z.ZodType<
  ListCapturesCaptures,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListCapturesCaptures$Outbound = {};

/** @internal */
export const ListCapturesCaptures$outboundSchema: z.ZodType<
  ListCapturesCaptures$Outbound,
  z.ZodTypeDef,
  ListCapturesCaptures
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesCaptures$ {
  /** @deprecated use `ListCapturesCaptures$inboundSchema` instead. */
  export const inboundSchema = ListCapturesCaptures$inboundSchema;
  /** @deprecated use `ListCapturesCaptures$outboundSchema` instead. */
  export const outboundSchema = ListCapturesCaptures$outboundSchema;
  /** @deprecated use `ListCapturesCaptures$Outbound` instead. */
  export type Outbound = ListCapturesCaptures$Outbound;
}

/** @internal */
export const ListCapturesEmbedded$inboundSchema: z.ZodType<
  ListCapturesEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  captures: z.array(z.lazy(() => ListCapturesCaptures$inboundSchema))
    .optional(),
});

/** @internal */
export type ListCapturesEmbedded$Outbound = {
  captures?: Array<ListCapturesCaptures$Outbound> | undefined;
};

/** @internal */
export const ListCapturesEmbedded$outboundSchema: z.ZodType<
  ListCapturesEmbedded$Outbound,
  z.ZodTypeDef,
  ListCapturesEmbedded
> = z.object({
  captures: z.array(z.lazy(() => ListCapturesCaptures$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesEmbedded$ {
  /** @deprecated use `ListCapturesEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListCapturesEmbedded$inboundSchema;
  /** @deprecated use `ListCapturesEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListCapturesEmbedded$outboundSchema;
  /** @deprecated use `ListCapturesEmbedded$Outbound` instead. */
  export type Outbound = ListCapturesEmbedded$Outbound;
}

/** @internal */
export const ListCapturesSelf$inboundSchema: z.ZodType<
  ListCapturesSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesSelf$outboundSchema: z.ZodType<
  ListCapturesSelf$Outbound,
  z.ZodTypeDef,
  ListCapturesSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesSelf$ {
  /** @deprecated use `ListCapturesSelf$inboundSchema` instead. */
  export const inboundSchema = ListCapturesSelf$inboundSchema;
  /** @deprecated use `ListCapturesSelf$outboundSchema` instead. */
  export const outboundSchema = ListCapturesSelf$outboundSchema;
  /** @deprecated use `ListCapturesSelf$Outbound` instead. */
  export type Outbound = ListCapturesSelf$Outbound;
}

/** @internal */
export const ListCapturesPrevious$inboundSchema: z.ZodType<
  ListCapturesPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesPrevious$outboundSchema: z.ZodType<
  ListCapturesPrevious$Outbound,
  z.ZodTypeDef,
  ListCapturesPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesPrevious$ {
  /** @deprecated use `ListCapturesPrevious$inboundSchema` instead. */
  export const inboundSchema = ListCapturesPrevious$inboundSchema;
  /** @deprecated use `ListCapturesPrevious$outboundSchema` instead. */
  export const outboundSchema = ListCapturesPrevious$outboundSchema;
  /** @deprecated use `ListCapturesPrevious$Outbound` instead. */
  export type Outbound = ListCapturesPrevious$Outbound;
}

/** @internal */
export const ListCapturesNext$inboundSchema: z.ZodType<
  ListCapturesNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesNext$outboundSchema: z.ZodType<
  ListCapturesNext$Outbound,
  z.ZodTypeDef,
  ListCapturesNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesNext$ {
  /** @deprecated use `ListCapturesNext$inboundSchema` instead. */
  export const inboundSchema = ListCapturesNext$inboundSchema;
  /** @deprecated use `ListCapturesNext$outboundSchema` instead. */
  export const outboundSchema = ListCapturesNext$outboundSchema;
  /** @deprecated use `ListCapturesNext$Outbound` instead. */
  export type Outbound = ListCapturesNext$Outbound;
}

/** @internal */
export const ListCapturesDocumentation$inboundSchema: z.ZodType<
  ListCapturesDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListCapturesDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListCapturesDocumentation$outboundSchema: z.ZodType<
  ListCapturesDocumentation$Outbound,
  z.ZodTypeDef,
  ListCapturesDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesDocumentation$ {
  /** @deprecated use `ListCapturesDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListCapturesDocumentation$inboundSchema;
  /** @deprecated use `ListCapturesDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListCapturesDocumentation$outboundSchema;
  /** @deprecated use `ListCapturesDocumentation$Outbound` instead. */
  export type Outbound = ListCapturesDocumentation$Outbound;
}

/** @internal */
export const ListCapturesLinks$inboundSchema: z.ZodType<
  ListCapturesLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListCapturesSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListCapturesPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListCapturesNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListCapturesDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListCapturesLinks$Outbound = {
  self?: ListCapturesSelf$Outbound | undefined;
  previous?: ListCapturesPrevious$Outbound | null | undefined;
  next?: ListCapturesNext$Outbound | null | undefined;
  documentation?: ListCapturesDocumentation$Outbound | undefined;
};

/** @internal */
export const ListCapturesLinks$outboundSchema: z.ZodType<
  ListCapturesLinks$Outbound,
  z.ZodTypeDef,
  ListCapturesLinks
> = z.object({
  self: z.lazy(() => ListCapturesSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListCapturesPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListCapturesNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListCapturesDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesLinks$ {
  /** @deprecated use `ListCapturesLinks$inboundSchema` instead. */
  export const inboundSchema = ListCapturesLinks$inboundSchema;
  /** @deprecated use `ListCapturesLinks$outboundSchema` instead. */
  export const outboundSchema = ListCapturesLinks$outboundSchema;
  /** @deprecated use `ListCapturesLinks$Outbound` instead. */
  export type Outbound = ListCapturesLinks$Outbound;
}

/** @internal */
export const ListCapturesResponseBody$inboundSchema: z.ZodType<
  ListCapturesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListCapturesEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListCapturesLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListCapturesResponseBody$Outbound = {
  count?: number | undefined;
  _embedded?: ListCapturesEmbedded$Outbound | undefined;
  _links?: ListCapturesLinks$Outbound | undefined;
};

/** @internal */
export const ListCapturesResponseBody$outboundSchema: z.ZodType<
  ListCapturesResponseBody$Outbound,
  z.ZodTypeDef,
  ListCapturesResponseBody
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListCapturesEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListCapturesLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCapturesResponseBody$ {
  /** @deprecated use `ListCapturesResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListCapturesResponseBody$inboundSchema;
  /** @deprecated use `ListCapturesResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListCapturesResponseBody$outboundSchema;
  /** @deprecated use `ListCapturesResponseBody$Outbound` instead. */
  export type Outbound = ListCapturesResponseBody$Outbound;
}
