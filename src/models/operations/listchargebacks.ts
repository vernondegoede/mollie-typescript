/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ListChargebacksRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `payment`: Include the payment these chargebacks were issued for.
   */
  include?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type ListChargebacksRefunds = {};

export type ListChargebacksEmbedded = {
  /**
   * A list of chargeback objects. For a complete reference of the chargeback object, refer to the [Get chargeback endpoint](get-chargeback) documentation.
   */
  refunds?: Array<ListChargebacksRefunds> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListChargebacksSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The previous set of items, if available.
 */
export type ListChargebacksPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListChargebacksNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListChargebacksDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListChargebacksLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListChargebacksSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListChargebacksPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListChargebacksNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListChargebacksDocumentation | undefined;
};

/**
 * A list of chargeback objects. For a complete reference of the chargeback object, refer to the [Get chargeback endpoint](get-chargeback) documentation.
 */
export type ListChargebacksResponseBody = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListChargebacksEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListChargebacksLinks | undefined;
};

/** @internal */
export const ListChargebacksRequest$inboundSchema: z.ZodType<
  ListChargebacksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type ListChargebacksRequest$Outbound = {
  paymentId: string;
  from?: string | null | undefined;
  limit: number | null;
  include?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const ListChargebacksRequest$outboundSchema: z.ZodType<
  ListChargebacksRequest$Outbound,
  z.ZodTypeDef,
  ListChargebacksRequest
> = z.object({
  paymentId: z.string(),
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  include: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksRequest$ {
  /** @deprecated use `ListChargebacksRequest$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksRequest$inboundSchema;
  /** @deprecated use `ListChargebacksRequest$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksRequest$outboundSchema;
  /** @deprecated use `ListChargebacksRequest$Outbound` instead. */
  export type Outbound = ListChargebacksRequest$Outbound;
}

/** @internal */
export const ListChargebacksRefunds$inboundSchema: z.ZodType<
  ListChargebacksRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListChargebacksRefunds$Outbound = {};

/** @internal */
export const ListChargebacksRefunds$outboundSchema: z.ZodType<
  ListChargebacksRefunds$Outbound,
  z.ZodTypeDef,
  ListChargebacksRefunds
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksRefunds$ {
  /** @deprecated use `ListChargebacksRefunds$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksRefunds$inboundSchema;
  /** @deprecated use `ListChargebacksRefunds$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksRefunds$outboundSchema;
  /** @deprecated use `ListChargebacksRefunds$Outbound` instead. */
  export type Outbound = ListChargebacksRefunds$Outbound;
}

/** @internal */
export const ListChargebacksEmbedded$inboundSchema: z.ZodType<
  ListChargebacksEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  refunds: z.array(z.lazy(() => ListChargebacksRefunds$inboundSchema))
    .optional(),
});

/** @internal */
export type ListChargebacksEmbedded$Outbound = {
  refunds?: Array<ListChargebacksRefunds$Outbound> | undefined;
};

/** @internal */
export const ListChargebacksEmbedded$outboundSchema: z.ZodType<
  ListChargebacksEmbedded$Outbound,
  z.ZodTypeDef,
  ListChargebacksEmbedded
> = z.object({
  refunds: z.array(z.lazy(() => ListChargebacksRefunds$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksEmbedded$ {
  /** @deprecated use `ListChargebacksEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksEmbedded$inboundSchema;
  /** @deprecated use `ListChargebacksEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksEmbedded$outboundSchema;
  /** @deprecated use `ListChargebacksEmbedded$Outbound` instead. */
  export type Outbound = ListChargebacksEmbedded$Outbound;
}

/** @internal */
export const ListChargebacksSelf$inboundSchema: z.ZodType<
  ListChargebacksSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListChargebacksSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListChargebacksSelf$outboundSchema: z.ZodType<
  ListChargebacksSelf$Outbound,
  z.ZodTypeDef,
  ListChargebacksSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksSelf$ {
  /** @deprecated use `ListChargebacksSelf$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksSelf$inboundSchema;
  /** @deprecated use `ListChargebacksSelf$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksSelf$outboundSchema;
  /** @deprecated use `ListChargebacksSelf$Outbound` instead. */
  export type Outbound = ListChargebacksSelf$Outbound;
}

/** @internal */
export const ListChargebacksPrevious$inboundSchema: z.ZodType<
  ListChargebacksPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListChargebacksPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListChargebacksPrevious$outboundSchema: z.ZodType<
  ListChargebacksPrevious$Outbound,
  z.ZodTypeDef,
  ListChargebacksPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksPrevious$ {
  /** @deprecated use `ListChargebacksPrevious$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksPrevious$inboundSchema;
  /** @deprecated use `ListChargebacksPrevious$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksPrevious$outboundSchema;
  /** @deprecated use `ListChargebacksPrevious$Outbound` instead. */
  export type Outbound = ListChargebacksPrevious$Outbound;
}

/** @internal */
export const ListChargebacksNext$inboundSchema: z.ZodType<
  ListChargebacksNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListChargebacksNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListChargebacksNext$outboundSchema: z.ZodType<
  ListChargebacksNext$Outbound,
  z.ZodTypeDef,
  ListChargebacksNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksNext$ {
  /** @deprecated use `ListChargebacksNext$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksNext$inboundSchema;
  /** @deprecated use `ListChargebacksNext$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksNext$outboundSchema;
  /** @deprecated use `ListChargebacksNext$Outbound` instead. */
  export type Outbound = ListChargebacksNext$Outbound;
}

/** @internal */
export const ListChargebacksDocumentation$inboundSchema: z.ZodType<
  ListChargebacksDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListChargebacksDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListChargebacksDocumentation$outboundSchema: z.ZodType<
  ListChargebacksDocumentation$Outbound,
  z.ZodTypeDef,
  ListChargebacksDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksDocumentation$ {
  /** @deprecated use `ListChargebacksDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksDocumentation$inboundSchema;
  /** @deprecated use `ListChargebacksDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksDocumentation$outboundSchema;
  /** @deprecated use `ListChargebacksDocumentation$Outbound` instead. */
  export type Outbound = ListChargebacksDocumentation$Outbound;
}

/** @internal */
export const ListChargebacksLinks$inboundSchema: z.ZodType<
  ListChargebacksLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListChargebacksSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListChargebacksPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListChargebacksNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListChargebacksDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListChargebacksLinks$Outbound = {
  self?: ListChargebacksSelf$Outbound | undefined;
  previous?: ListChargebacksPrevious$Outbound | null | undefined;
  next?: ListChargebacksNext$Outbound | null | undefined;
  documentation?: ListChargebacksDocumentation$Outbound | undefined;
};

/** @internal */
export const ListChargebacksLinks$outboundSchema: z.ZodType<
  ListChargebacksLinks$Outbound,
  z.ZodTypeDef,
  ListChargebacksLinks
> = z.object({
  self: z.lazy(() => ListChargebacksSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListChargebacksPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListChargebacksNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListChargebacksDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksLinks$ {
  /** @deprecated use `ListChargebacksLinks$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksLinks$inboundSchema;
  /** @deprecated use `ListChargebacksLinks$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksLinks$outboundSchema;
  /** @deprecated use `ListChargebacksLinks$Outbound` instead. */
  export type Outbound = ListChargebacksLinks$Outbound;
}

/** @internal */
export const ListChargebacksResponseBody$inboundSchema: z.ZodType<
  ListChargebacksResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListChargebacksEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListChargebacksLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListChargebacksResponseBody$Outbound = {
  count?: number | undefined;
  _embedded?: ListChargebacksEmbedded$Outbound | undefined;
  _links?: ListChargebacksLinks$Outbound | undefined;
};

/** @internal */
export const ListChargebacksResponseBody$outboundSchema: z.ZodType<
  ListChargebacksResponseBody$Outbound,
  z.ZodTypeDef,
  ListChargebacksResponseBody
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListChargebacksEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListChargebacksLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListChargebacksResponseBody$ {
  /** @deprecated use `ListChargebacksResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListChargebacksResponseBody$inboundSchema;
  /** @deprecated use `ListChargebacksResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListChargebacksResponseBody$outboundSchema;
  /** @deprecated use `ListChargebacksResponseBody$Outbound` instead. */
  export type Outbound = ListChargebacksResponseBody$Outbound;
}
