/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
 */
export type CreateRefundAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type CreateRefundRequestBody = {
  /**
   * The description of the refund that may be shown to your customer, depending on the payment method used.
   */
  description?: string | undefined;
  /**
   * The amount refunded to your customer with this refund. The amount is allowed to be lower than the original payment amount.
   */
  amount: CreateRefundAmount;
  /**
   * Provide any data you like, for example a string or a JSON object. We will save the data alongside the entity. Whenever you fetch the entity with our API, we will also include the metadata. You can use up to approximately 1kB.
   */
  metadata?: string | null | undefined;
  /**
   * Whether to create the entity in test mode or live mode.
   *
   * @remarks
   *
   * Most API credentials are specifically created for either live mode or test mode, in which case this parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting `testmode` to `true`.
   */
  testmode?: boolean | null | undefined;
};

export type CreateRefundRequest = {
  /**
   * Provide the ID of the related payment.
   */
  paymentId: string;
  requestBody?: CreateRefundRequestBody | undefined;
};

/** @internal */
export const CreateRefundAmount$inboundSchema: z.ZodType<
  CreateRefundAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type CreateRefundAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const CreateRefundAmount$outboundSchema: z.ZodType<
  CreateRefundAmount$Outbound,
  z.ZodTypeDef,
  CreateRefundAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundAmount$ {
  /** @deprecated use `CreateRefundAmount$inboundSchema` instead. */
  export const inboundSchema = CreateRefundAmount$inboundSchema;
  /** @deprecated use `CreateRefundAmount$outboundSchema` instead. */
  export const outboundSchema = CreateRefundAmount$outboundSchema;
  /** @deprecated use `CreateRefundAmount$Outbound` instead. */
  export type Outbound = CreateRefundAmount$Outbound;
}

/** @internal */
export const CreateRefundRequestBody$inboundSchema: z.ZodType<
  CreateRefundRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  amount: z.lazy(() => CreateRefundAmount$inboundSchema),
  metadata: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type CreateRefundRequestBody$Outbound = {
  description?: string | undefined;
  amount: CreateRefundAmount$Outbound;
  metadata?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const CreateRefundRequestBody$outboundSchema: z.ZodType<
  CreateRefundRequestBody$Outbound,
  z.ZodTypeDef,
  CreateRefundRequestBody
> = z.object({
  description: z.string().optional(),
  amount: z.lazy(() => CreateRefundAmount$outboundSchema),
  metadata: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundRequestBody$ {
  /** @deprecated use `CreateRefundRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateRefundRequestBody$inboundSchema;
  /** @deprecated use `CreateRefundRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateRefundRequestBody$outboundSchema;
  /** @deprecated use `CreateRefundRequestBody$Outbound` instead. */
  export type Outbound = CreateRefundRequestBody$Outbound;
}

/** @internal */
export const CreateRefundRequest$inboundSchema: z.ZodType<
  CreateRefundRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string(),
  RequestBody: z.lazy(() => CreateRefundRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateRefundRequest$Outbound = {
  paymentId: string;
  RequestBody?: CreateRefundRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateRefundRequest$outboundSchema: z.ZodType<
  CreateRefundRequest$Outbound,
  z.ZodTypeDef,
  CreateRefundRequest
> = z.object({
  paymentId: z.string(),
  requestBody: z.lazy(() => CreateRefundRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRefundRequest$ {
  /** @deprecated use `CreateRefundRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRefundRequest$inboundSchema;
  /** @deprecated use `CreateRefundRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRefundRequest$outboundSchema;
  /** @deprecated use `CreateRefundRequest$Outbound` instead. */
  export type Outbound = CreateRefundRequest$Outbound;
}
