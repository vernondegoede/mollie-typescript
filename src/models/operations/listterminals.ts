/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ListTerminalsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type Terminals = {};

export type ListTerminalsEmbedded = {
  /**
   * An array of terminal objects. For a complete reference of the terminal object, refer to the [Get terminal endpoint](get-terminal) documentation.
   */
  terminals?: Array<Terminals> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type ListTerminalsSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The previous set of items, if available.
 */
export type ListTerminalsPrevious = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type ListTerminalsNext = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListTerminalsDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type ListTerminalsLinks = {
  /**
   * The URL to the current set of items.
   */
  self?: ListTerminalsSelf | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: ListTerminalsPrevious | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: ListTerminalsNext | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListTerminalsDocumentation | undefined;
};

/**
 * A list of terminal objects. For a complete reference of the terminal object, refer to the [Get terminal endpoint](get-terminal) documentation.
 */
export type ListTerminalsResponseBody = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: ListTerminalsEmbedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: ListTerminalsLinks | undefined;
};

/** @internal */
export const ListTerminalsRequest$inboundSchema: z.ZodType<
  ListTerminalsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type ListTerminalsRequest$Outbound = {
  from?: string | null | undefined;
  limit: number | null;
  testmode: boolean | null;
};

/** @internal */
export const ListTerminalsRequest$outboundSchema: z.ZodType<
  ListTerminalsRequest$Outbound,
  z.ZodTypeDef,
  ListTerminalsRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsRequest$ {
  /** @deprecated use `ListTerminalsRequest$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsRequest$inboundSchema;
  /** @deprecated use `ListTerminalsRequest$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsRequest$outboundSchema;
  /** @deprecated use `ListTerminalsRequest$Outbound` instead. */
  export type Outbound = ListTerminalsRequest$Outbound;
}

/** @internal */
export const Terminals$inboundSchema: z.ZodType<
  Terminals,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Terminals$Outbound = {};

/** @internal */
export const Terminals$outboundSchema: z.ZodType<
  Terminals$Outbound,
  z.ZodTypeDef,
  Terminals
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Terminals$ {
  /** @deprecated use `Terminals$inboundSchema` instead. */
  export const inboundSchema = Terminals$inboundSchema;
  /** @deprecated use `Terminals$outboundSchema` instead. */
  export const outboundSchema = Terminals$outboundSchema;
  /** @deprecated use `Terminals$Outbound` instead. */
  export type Outbound = Terminals$Outbound;
}

/** @internal */
export const ListTerminalsEmbedded$inboundSchema: z.ZodType<
  ListTerminalsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  terminals: z.array(z.lazy(() => Terminals$inboundSchema)).optional(),
});

/** @internal */
export type ListTerminalsEmbedded$Outbound = {
  terminals?: Array<Terminals$Outbound> | undefined;
};

/** @internal */
export const ListTerminalsEmbedded$outboundSchema: z.ZodType<
  ListTerminalsEmbedded$Outbound,
  z.ZodTypeDef,
  ListTerminalsEmbedded
> = z.object({
  terminals: z.array(z.lazy(() => Terminals$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsEmbedded$ {
  /** @deprecated use `ListTerminalsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsEmbedded$inboundSchema;
  /** @deprecated use `ListTerminalsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsEmbedded$outboundSchema;
  /** @deprecated use `ListTerminalsEmbedded$Outbound` instead. */
  export type Outbound = ListTerminalsEmbedded$Outbound;
}

/** @internal */
export const ListTerminalsSelf$inboundSchema: z.ZodType<
  ListTerminalsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListTerminalsSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListTerminalsSelf$outboundSchema: z.ZodType<
  ListTerminalsSelf$Outbound,
  z.ZodTypeDef,
  ListTerminalsSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsSelf$ {
  /** @deprecated use `ListTerminalsSelf$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsSelf$inboundSchema;
  /** @deprecated use `ListTerminalsSelf$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsSelf$outboundSchema;
  /** @deprecated use `ListTerminalsSelf$Outbound` instead. */
  export type Outbound = ListTerminalsSelf$Outbound;
}

/** @internal */
export const ListTerminalsPrevious$inboundSchema: z.ZodType<
  ListTerminalsPrevious,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListTerminalsPrevious$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListTerminalsPrevious$outboundSchema: z.ZodType<
  ListTerminalsPrevious$Outbound,
  z.ZodTypeDef,
  ListTerminalsPrevious
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsPrevious$ {
  /** @deprecated use `ListTerminalsPrevious$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsPrevious$inboundSchema;
  /** @deprecated use `ListTerminalsPrevious$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsPrevious$outboundSchema;
  /** @deprecated use `ListTerminalsPrevious$Outbound` instead. */
  export type Outbound = ListTerminalsPrevious$Outbound;
}

/** @internal */
export const ListTerminalsNext$inboundSchema: z.ZodType<
  ListTerminalsNext,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListTerminalsNext$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListTerminalsNext$outboundSchema: z.ZodType<
  ListTerminalsNext$Outbound,
  z.ZodTypeDef,
  ListTerminalsNext
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsNext$ {
  /** @deprecated use `ListTerminalsNext$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsNext$inboundSchema;
  /** @deprecated use `ListTerminalsNext$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsNext$outboundSchema;
  /** @deprecated use `ListTerminalsNext$Outbound` instead. */
  export type Outbound = ListTerminalsNext$Outbound;
}

/** @internal */
export const ListTerminalsDocumentation$inboundSchema: z.ZodType<
  ListTerminalsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListTerminalsDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListTerminalsDocumentation$outboundSchema: z.ZodType<
  ListTerminalsDocumentation$Outbound,
  z.ZodTypeDef,
  ListTerminalsDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsDocumentation$ {
  /** @deprecated use `ListTerminalsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsDocumentation$inboundSchema;
  /** @deprecated use `ListTerminalsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsDocumentation$outboundSchema;
  /** @deprecated use `ListTerminalsDocumentation$Outbound` instead. */
  export type Outbound = ListTerminalsDocumentation$Outbound;
}

/** @internal */
export const ListTerminalsLinks$inboundSchema: z.ZodType<
  ListTerminalsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListTerminalsSelf$inboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListTerminalsPrevious$inboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListTerminalsNext$inboundSchema)).optional(),
  documentation: z.lazy(() => ListTerminalsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListTerminalsLinks$Outbound = {
  self?: ListTerminalsSelf$Outbound | undefined;
  previous?: ListTerminalsPrevious$Outbound | null | undefined;
  next?: ListTerminalsNext$Outbound | null | undefined;
  documentation?: ListTerminalsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListTerminalsLinks$outboundSchema: z.ZodType<
  ListTerminalsLinks$Outbound,
  z.ZodTypeDef,
  ListTerminalsLinks
> = z.object({
  self: z.lazy(() => ListTerminalsSelf$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => ListTerminalsPrevious$outboundSchema))
    .optional(),
  next: z.nullable(z.lazy(() => ListTerminalsNext$outboundSchema)).optional(),
  documentation: z.lazy(() => ListTerminalsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsLinks$ {
  /** @deprecated use `ListTerminalsLinks$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsLinks$inboundSchema;
  /** @deprecated use `ListTerminalsLinks$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsLinks$outboundSchema;
  /** @deprecated use `ListTerminalsLinks$Outbound` instead. */
  export type Outbound = ListTerminalsLinks$Outbound;
}

/** @internal */
export const ListTerminalsResponseBody$inboundSchema: z.ZodType<
  ListTerminalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListTerminalsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListTerminalsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListTerminalsResponseBody$Outbound = {
  count?: number | undefined;
  _embedded?: ListTerminalsEmbedded$Outbound | undefined;
  _links?: ListTerminalsLinks$Outbound | undefined;
};

/** @internal */
export const ListTerminalsResponseBody$outboundSchema: z.ZodType<
  ListTerminalsResponseBody$Outbound,
  z.ZodTypeDef,
  ListTerminalsResponseBody
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListTerminalsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListTerminalsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTerminalsResponseBody$ {
  /** @deprecated use `ListTerminalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListTerminalsResponseBody$inboundSchema;
  /** @deprecated use `ListTerminalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListTerminalsResponseBody$outboundSchema;
  /** @deprecated use `ListTerminalsResponseBody$Outbound` instead. */
  export type Outbound = ListTerminalsResponseBody$Outbound;
}
