/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ListPaymentsRequest = {
  /**
   * Provide an ID to start the result set from the item with the given ID and onwards. This allows you to paginate the result set.
   */
  from?: string | null | undefined;
  /**
   * The maximum number of items to return. Defaults to 50 items.
   */
  limit?: number | null | undefined;
  /**
   * Used for setting the direction of the result set. Defaults to descending order, meaning the results are ordered from newest to oldest.
   *
   * @remarks
   *
   * Possible values: `asc` `desc` (default: `desc`)
   */
  sort?: string | null | undefined;
  /**
   * Most API credentials are specifically created for either live mode or test mode. In those cases the `testmode` query parameter can be omitted. For organization-level credentials such as OAuth access tokens, you can enable test mode by setting the `testmode` query parameter to `true`.
   *
   * @remarks
   *
   * Test entities cannot be retrieved when the endpoint is set to live mode, and vice versa.
   */
  testmode?: boolean | null | undefined;
};

export type Payments = {};

export type Embedded = {
  /**
   * An array of payment objects. For a complete reference of the payment object, refer to the [Get payment endpoint](get-payment) documentation.
   */
  payments?: Array<Payments> | undefined;
};

/**
 * The URL to the current set of items.
 */
export type Self = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The previous set of items, if available.
 */
export type Previous = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * The next set of items, if available.
 */
export type Next = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type Documentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
 */
export type Links = {
  /**
   * The URL to the current set of items.
   */
  self?: Self | undefined;
  /**
   * The previous set of items, if available.
   */
  previous?: Previous | null | undefined;
  /**
   * The next set of items, if available.
   */
  next?: Next | null | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: Documentation | undefined;
};

/**
 * A list of payment objects. For a complete reference of the payment object, refer to the [Get payment endpoint](get-payment) documentation.
 */
export type ListPaymentsResponseBody = {
  /**
   * The number of items in this result set. If more items are available, a `_links.next` URL will be present in the result as well.
   *
   * @remarks
   *
   * The maximum number of items per result set is controlled by the `limit` property provided in the request. The default limit is 50 items.
   */
  count?: number | undefined;
  embedded?: Embedded | undefined;
  /**
   * Links to help navigate through the lists of items. Every URL object will contain an `href` and a `type` field.
   */
  links?: Links | undefined;
};

/** @internal */
export const ListPaymentsRequest$inboundSchema: z.ZodType<
  ListPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type ListPaymentsRequest$Outbound = {
  from?: string | null | undefined;
  limit: number | null;
  sort?: string | null | undefined;
  testmode: boolean | null;
};

/** @internal */
export const ListPaymentsRequest$outboundSchema: z.ZodType<
  ListPaymentsRequest$Outbound,
  z.ZodTypeDef,
  ListPaymentsRequest
> = z.object({
  from: z.nullable(z.string()).optional(),
  limit: z.nullable(z.number().int().default(50)),
  sort: z.nullable(z.string()).optional(),
  testmode: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsRequest$ {
  /** @deprecated use `ListPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsRequest$inboundSchema;
  /** @deprecated use `ListPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsRequest$outboundSchema;
  /** @deprecated use `ListPaymentsRequest$Outbound` instead. */
  export type Outbound = ListPaymentsRequest$Outbound;
}

/** @internal */
export const Payments$inboundSchema: z.ZodType<
  Payments,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Payments$Outbound = {};

/** @internal */
export const Payments$outboundSchema: z.ZodType<
  Payments$Outbound,
  z.ZodTypeDef,
  Payments
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payments$ {
  /** @deprecated use `Payments$inboundSchema` instead. */
  export const inboundSchema = Payments$inboundSchema;
  /** @deprecated use `Payments$outboundSchema` instead. */
  export const outboundSchema = Payments$outboundSchema;
  /** @deprecated use `Payments$Outbound` instead. */
  export type Outbound = Payments$Outbound;
}

/** @internal */
export const Embedded$inboundSchema: z.ZodType<
  Embedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  payments: z.array(z.lazy(() => Payments$inboundSchema)).optional(),
});

/** @internal */
export type Embedded$Outbound = {
  payments?: Array<Payments$Outbound> | undefined;
};

/** @internal */
export const Embedded$outboundSchema: z.ZodType<
  Embedded$Outbound,
  z.ZodTypeDef,
  Embedded
> = z.object({
  payments: z.array(z.lazy(() => Payments$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Embedded$ {
  /** @deprecated use `Embedded$inboundSchema` instead. */
  export const inboundSchema = Embedded$inboundSchema;
  /** @deprecated use `Embedded$outboundSchema` instead. */
  export const outboundSchema = Embedded$outboundSchema;
  /** @deprecated use `Embedded$Outbound` instead. */
  export type Outbound = Embedded$Outbound;
}

/** @internal */
export const Self$inboundSchema: z.ZodType<Self, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type Self$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Self$outboundSchema: z.ZodType<Self$Outbound, z.ZodTypeDef, Self> =
  z.object({
    href: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Self$ {
  /** @deprecated use `Self$inboundSchema` instead. */
  export const inboundSchema = Self$inboundSchema;
  /** @deprecated use `Self$outboundSchema` instead. */
  export const outboundSchema = Self$outboundSchema;
  /** @deprecated use `Self$Outbound` instead. */
  export type Outbound = Self$Outbound;
}

/** @internal */
export const Previous$inboundSchema: z.ZodType<
  Previous,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Previous$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Previous$outboundSchema: z.ZodType<
  Previous$Outbound,
  z.ZodTypeDef,
  Previous
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Previous$ {
  /** @deprecated use `Previous$inboundSchema` instead. */
  export const inboundSchema = Previous$inboundSchema;
  /** @deprecated use `Previous$outboundSchema` instead. */
  export const outboundSchema = Previous$outboundSchema;
  /** @deprecated use `Previous$Outbound` instead. */
  export type Outbound = Previous$Outbound;
}

/** @internal */
export const Next$inboundSchema: z.ZodType<Next, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type Next$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Next$outboundSchema: z.ZodType<Next$Outbound, z.ZodTypeDef, Next> =
  z.object({
    href: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Next$ {
  /** @deprecated use `Next$inboundSchema` instead. */
  export const inboundSchema = Next$inboundSchema;
  /** @deprecated use `Next$outboundSchema` instead. */
  export const outboundSchema = Next$outboundSchema;
  /** @deprecated use `Next$Outbound` instead. */
  export type Outbound = Next$Outbound;
}

/** @internal */
export const Documentation$inboundSchema: z.ZodType<
  Documentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type Documentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const Documentation$outboundSchema: z.ZodType<
  Documentation$Outbound,
  z.ZodTypeDef,
  Documentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documentation$ {
  /** @deprecated use `Documentation$inboundSchema` instead. */
  export const inboundSchema = Documentation$inboundSchema;
  /** @deprecated use `Documentation$outboundSchema` instead. */
  export const outboundSchema = Documentation$outboundSchema;
  /** @deprecated use `Documentation$Outbound` instead. */
  export type Outbound = Documentation$Outbound;
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    self: z.lazy(() => Self$inboundSchema).optional(),
    previous: z.nullable(z.lazy(() => Previous$inboundSchema)).optional(),
    next: z.nullable(z.lazy(() => Next$inboundSchema)).optional(),
    documentation: z.lazy(() => Documentation$inboundSchema).optional(),
  });

/** @internal */
export type Links$Outbound = {
  self?: Self$Outbound | undefined;
  previous?: Previous$Outbound | null | undefined;
  next?: Next$Outbound | null | undefined;
  documentation?: Documentation$Outbound | undefined;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  self: z.lazy(() => Self$outboundSchema).optional(),
  previous: z.nullable(z.lazy(() => Previous$outboundSchema)).optional(),
  next: z.nullable(z.lazy(() => Next$outboundSchema)).optional(),
  documentation: z.lazy(() => Documentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

/** @internal */
export const ListPaymentsResponseBody$inboundSchema: z.ZodType<
  ListPaymentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => Embedded$inboundSchema).optional(),
  _links: z.lazy(() => Links$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListPaymentsResponseBody$Outbound = {
  count?: number | undefined;
  _embedded?: Embedded$Outbound | undefined;
  _links?: Links$Outbound | undefined;
};

/** @internal */
export const ListPaymentsResponseBody$outboundSchema: z.ZodType<
  ListPaymentsResponseBody$Outbound,
  z.ZodTypeDef,
  ListPaymentsResponseBody
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => Embedded$outboundSchema).optional(),
  links: z.lazy(() => Links$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaymentsResponseBody$ {
  /** @deprecated use `ListPaymentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListPaymentsResponseBody$inboundSchema;
  /** @deprecated use `ListPaymentsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListPaymentsResponseBody$outboundSchema;
  /** @deprecated use `ListPaymentsResponseBody$Outbound` instead. */
  export type Outbound = ListPaymentsResponseBody$Outbound;
}
