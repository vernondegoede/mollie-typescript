/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * In v2 endpoints, monetary amounts are represented as objects with a `currency` and `value` field.
 */
export type ListAllMethodsQueryParamAmount = {
  /**
   * A three-character ISO 4217 currency code.
   */
  currency: string;
  /**
   * A string containing an exact monetary amount in the given currency.
   */
  value: string;
};

export type ListAllMethodsRequest = {
  /**
   * Passing a locale will sort the payment methods in the preferred order for the country, and translate the payment method names in the corresponding language.
   *
   * @remarks
   *
   * Possible values: `en_US` `en_GB` `nl_NL` `nl_BE` `de_DE` `de_AT` `de_CH` `fr_FR` `fr_BE` `es_ES` `ca_ES` `pt_PT` `it_IT` `nb_NO` `sv_SE` `fi_FI` `da_DK` `is_IS` `hu_HU` `pl_PL` `lv_LV` `lt_LT`
   */
  locale?: string | undefined;
  /**
   * If supplied, only payment methods that support the amount and currency are returned.
   *
   * @remarks
   *
   * Example: `/v2/methods/all?amount[value]=100.00&amount[currency]=USD`
   */
  amount?: ListAllMethodsQueryParamAmount | undefined;
  /**
   * This endpoint allows you to include additional information via the `include` query string parameter.
   *
   * @remarks
   *
   * * `issuers`: Include issuer details such as which iDEAL or gift card issuers are available.
   * * `pricing`: Include pricing for each payment method.
   */
  include?: string | null | undefined;
};

export type ListAllMethodsMethods = {};

export type ListAllMethodsEmbedded = {
  /**
   * An array of payment method objects. For a complete reference of the payment method object, refer to the [Get payment method endpoint](get-method) documentation.
   */
  methods?: Array<ListAllMethodsMethods> | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllMethodsSelf = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

/**
 * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
 */
export type ListAllMethodsDocumentation = {
  /**
   * The actual URL string.
   */
  href?: string | undefined;
  /**
   * The content type of the page or endpoint the URL points to.
   */
  type?: string | undefined;
};

export type ListAllMethodsLinks = {
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  self?: ListAllMethodsSelf | undefined;
  /**
   * In v2 endpoints, URLs are commonly represented as objects with an `href` and `type` field.
   */
  documentation?: ListAllMethodsDocumentation | undefined;
};

/**
 * A list of payment method objects. For a complete reference of the payment method object, refer to the [Get payment method endpoint](get-method) documentation.
 */
export type ListAllMethodsResponseBody = {
  /**
   * The number of payment method objects in this result set. Results are **not** paginated.
   */
  count?: number | undefined;
  embedded?: ListAllMethodsEmbedded | undefined;
  links?: ListAllMethodsLinks | undefined;
};

/** @internal */
export const ListAllMethodsQueryParamAmount$inboundSchema: z.ZodType<
  ListAllMethodsQueryParamAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/** @internal */
export type ListAllMethodsQueryParamAmount$Outbound = {
  currency: string;
  value: string;
};

/** @internal */
export const ListAllMethodsQueryParamAmount$outboundSchema: z.ZodType<
  ListAllMethodsQueryParamAmount$Outbound,
  z.ZodTypeDef,
  ListAllMethodsQueryParamAmount
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsQueryParamAmount$ {
  /** @deprecated use `ListAllMethodsQueryParamAmount$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsQueryParamAmount$inboundSchema;
  /** @deprecated use `ListAllMethodsQueryParamAmount$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsQueryParamAmount$outboundSchema;
  /** @deprecated use `ListAllMethodsQueryParamAmount$Outbound` instead. */
  export type Outbound = ListAllMethodsQueryParamAmount$Outbound;
}

/** @internal */
export const ListAllMethodsRequest$inboundSchema: z.ZodType<
  ListAllMethodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  locale: z.string().optional(),
  amount: z.lazy(() => ListAllMethodsQueryParamAmount$inboundSchema).optional(),
  include: z.nullable(z.string()).optional(),
});

/** @internal */
export type ListAllMethodsRequest$Outbound = {
  locale?: string | undefined;
  amount?: ListAllMethodsQueryParamAmount$Outbound | undefined;
  include?: string | null | undefined;
};

/** @internal */
export const ListAllMethodsRequest$outboundSchema: z.ZodType<
  ListAllMethodsRequest$Outbound,
  z.ZodTypeDef,
  ListAllMethodsRequest
> = z.object({
  locale: z.string().optional(),
  amount: z.lazy(() => ListAllMethodsQueryParamAmount$outboundSchema)
    .optional(),
  include: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsRequest$ {
  /** @deprecated use `ListAllMethodsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsRequest$inboundSchema;
  /** @deprecated use `ListAllMethodsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsRequest$outboundSchema;
  /** @deprecated use `ListAllMethodsRequest$Outbound` instead. */
  export type Outbound = ListAllMethodsRequest$Outbound;
}

/** @internal */
export const ListAllMethodsMethods$inboundSchema: z.ZodType<
  ListAllMethodsMethods,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ListAllMethodsMethods$Outbound = {};

/** @internal */
export const ListAllMethodsMethods$outboundSchema: z.ZodType<
  ListAllMethodsMethods$Outbound,
  z.ZodTypeDef,
  ListAllMethodsMethods
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsMethods$ {
  /** @deprecated use `ListAllMethodsMethods$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsMethods$inboundSchema;
  /** @deprecated use `ListAllMethodsMethods$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsMethods$outboundSchema;
  /** @deprecated use `ListAllMethodsMethods$Outbound` instead. */
  export type Outbound = ListAllMethodsMethods$Outbound;
}

/** @internal */
export const ListAllMethodsEmbedded$inboundSchema: z.ZodType<
  ListAllMethodsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  methods: z.array(z.lazy(() => ListAllMethodsMethods$inboundSchema))
    .optional(),
});

/** @internal */
export type ListAllMethodsEmbedded$Outbound = {
  methods?: Array<ListAllMethodsMethods$Outbound> | undefined;
};

/** @internal */
export const ListAllMethodsEmbedded$outboundSchema: z.ZodType<
  ListAllMethodsEmbedded$Outbound,
  z.ZodTypeDef,
  ListAllMethodsEmbedded
> = z.object({
  methods: z.array(z.lazy(() => ListAllMethodsMethods$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsEmbedded$ {
  /** @deprecated use `ListAllMethodsEmbedded$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsEmbedded$inboundSchema;
  /** @deprecated use `ListAllMethodsEmbedded$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsEmbedded$outboundSchema;
  /** @deprecated use `ListAllMethodsEmbedded$Outbound` instead. */
  export type Outbound = ListAllMethodsEmbedded$Outbound;
}

/** @internal */
export const ListAllMethodsSelf$inboundSchema: z.ZodType<
  ListAllMethodsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllMethodsSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllMethodsSelf$outboundSchema: z.ZodType<
  ListAllMethodsSelf$Outbound,
  z.ZodTypeDef,
  ListAllMethodsSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsSelf$ {
  /** @deprecated use `ListAllMethodsSelf$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsSelf$inboundSchema;
  /** @deprecated use `ListAllMethodsSelf$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsSelf$outboundSchema;
  /** @deprecated use `ListAllMethodsSelf$Outbound` instead. */
  export type Outbound = ListAllMethodsSelf$Outbound;
}

/** @internal */
export const ListAllMethodsDocumentation$inboundSchema: z.ZodType<
  ListAllMethodsDocumentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type ListAllMethodsDocumentation$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const ListAllMethodsDocumentation$outboundSchema: z.ZodType<
  ListAllMethodsDocumentation$Outbound,
  z.ZodTypeDef,
  ListAllMethodsDocumentation
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsDocumentation$ {
  /** @deprecated use `ListAllMethodsDocumentation$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsDocumentation$inboundSchema;
  /** @deprecated use `ListAllMethodsDocumentation$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsDocumentation$outboundSchema;
  /** @deprecated use `ListAllMethodsDocumentation$Outbound` instead. */
  export type Outbound = ListAllMethodsDocumentation$Outbound;
}

/** @internal */
export const ListAllMethodsLinks$inboundSchema: z.ZodType<
  ListAllMethodsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => ListAllMethodsSelf$inboundSchema).optional(),
  documentation: z.lazy(() => ListAllMethodsDocumentation$inboundSchema)
    .optional(),
});

/** @internal */
export type ListAllMethodsLinks$Outbound = {
  self?: ListAllMethodsSelf$Outbound | undefined;
  documentation?: ListAllMethodsDocumentation$Outbound | undefined;
};

/** @internal */
export const ListAllMethodsLinks$outboundSchema: z.ZodType<
  ListAllMethodsLinks$Outbound,
  z.ZodTypeDef,
  ListAllMethodsLinks
> = z.object({
  self: z.lazy(() => ListAllMethodsSelf$outboundSchema).optional(),
  documentation: z.lazy(() => ListAllMethodsDocumentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsLinks$ {
  /** @deprecated use `ListAllMethodsLinks$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsLinks$inboundSchema;
  /** @deprecated use `ListAllMethodsLinks$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsLinks$outboundSchema;
  /** @deprecated use `ListAllMethodsLinks$Outbound` instead. */
  export type Outbound = ListAllMethodsLinks$Outbound;
}

/** @internal */
export const ListAllMethodsResponseBody$inboundSchema: z.ZodType<
  ListAllMethodsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().int().optional(),
  _embedded: z.lazy(() => ListAllMethodsEmbedded$inboundSchema).optional(),
  _links: z.lazy(() => ListAllMethodsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
    "_links": "links",
  });
});

/** @internal */
export type ListAllMethodsResponseBody$Outbound = {
  count?: number | undefined;
  _embedded?: ListAllMethodsEmbedded$Outbound | undefined;
  _links?: ListAllMethodsLinks$Outbound | undefined;
};

/** @internal */
export const ListAllMethodsResponseBody$outboundSchema: z.ZodType<
  ListAllMethodsResponseBody$Outbound,
  z.ZodTypeDef,
  ListAllMethodsResponseBody
> = z.object({
  count: z.number().int().optional(),
  embedded: z.lazy(() => ListAllMethodsEmbedded$outboundSchema).optional(),
  links: z.lazy(() => ListAllMethodsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAllMethodsResponseBody$ {
  /** @deprecated use `ListAllMethodsResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListAllMethodsResponseBody$inboundSchema;
  /** @deprecated use `ListAllMethodsResponseBody$outboundSchema` instead. */
  export const outboundSchema = ListAllMethodsResponseBody$outboundSchema;
  /** @deprecated use `ListAllMethodsResponseBody$Outbound` instead. */
  export type Outbound = ListAllMethodsResponseBody$Outbound;
}
