/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { MollieCore } from "../core.js";
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { Result } from "../types/fp.js";

/**
 * List payment methods
 *
 * @remarks
 * Retrieve all enabled payment methods. The results of this endpoint are **not** paginated â€” unlike most other list endpoints in our API.
 *
 * For test mode, all pending and enabled payment methods are returned. For live mode, only fully enabled payment methods are returned.
 *
 * Payment methods can be requested and enabled via the Mollie Dashboard, or via the [Enable payment method endpoint](enable-method) of the Profiles API.
 *
 * The list can optionally be filtered using a number of parameters described below.
 */
export async function methodsAPIListMethods(
  client: MollieCore,
  request: operations.ListMethodsRequest,
  options?: RequestOptions,
): Promise<
  Result<
    operations.ListMethodsResponseBody,
    | errors.ListMethodsResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const parsed = safeParse(
    request,
    (value) => operations.ListMethodsRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return parsed;
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/methods")();

  const query = encodeFormQuery({
    "amount": payload.amount,
    "billingCountry": payload.billingCountry,
    "include": payload.include,
    "includeWallets": payload.includeWallets,
    "locale": payload.locale,
    "orderLineCategories": payload.orderLineCategories,
    "profileId": payload.profileId,
    "resource": payload.resource,
    "sequenceType": payload.sequenceType,
    "testmode": payload.testmode,
  });

  const headers = new Headers({
    Accept: "application/hal+json",
  });

  const secConfig = await extractSecurity(client._options.bearerAuth);
  const securityInput = secConfig == null ? {} : { bearerAuth: secConfig };
  const context = {
    operationID: "list-methods",
    oAuth2Scopes: [],
    securitySource: client._options.bearerAuth,
  };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    path: path,
    headers: headers,
    query: query,
    body: body,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "4XX", "5XX"],
    retryConfig: options?.retries
      || client._options.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.ListMethodsResponseBody,
    | errors.ListMethodsResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.json(200, operations.ListMethodsResponseBody$inboundSchema, {
      ctype: "application/hal+json",
    }),
    M.jsonErr(400, errors.ListMethodsResponseBody$inboundSchema, {
      ctype: "application/hal+json",
    }),
    M.fail(["4XX", "5XX"]),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return result;
  }

  return result;
}
