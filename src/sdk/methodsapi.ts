/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { methodsAPIDisableMethod } from "../funcs/methodsAPIDisableMethod.js";
import { methodsAPIDisableMethodIssuer } from "../funcs/methodsAPIDisableMethodIssuer.js";
import { methodsAPIEnableMethod } from "../funcs/methodsAPIEnableMethod.js";
import { methodsAPIEnableMethodIssuer } from "../funcs/methodsAPIEnableMethodIssuer.js";
import { methodsAPIGetMethod } from "../funcs/methodsAPIGetMethod.js";
import { methodsAPIListAllMethods } from "../funcs/methodsAPIListAllMethods.js";
import { methodsAPIListMethods } from "../funcs/methodsAPIListMethods.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class MethodsAPI extends ClientSDK {
  /**
   * List payment methods
   *
   * @remarks
   * Retrieve all enabled payment methods. The results of this endpoint are **not** paginated — unlike most other list endpoints in our API.
   *
   * For test mode, all pending and enabled payment methods are returned. For live mode, only fully enabled payment methods are returned.
   *
   * Payment methods can be requested and enabled via the Mollie Dashboard, or via the [Enable payment method endpoint](enable-method) of the Profiles API.
   *
   * The list can optionally be filtered using a number of parameters described below.
   */
  async listMethods(
    request: operations.ListMethodsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListMethodsResponseBody> {
    return unwrapAsync(methodsAPIListMethods(
      this,
      request,
      options,
    ));
  }

  /**
   * List all payment methods
   *
   * @remarks
   * Retrieve all payment methods that Mollie offers. The results of this endpoint are **not** paginated — unlike most other list endpoints in our API.
   *
   * The list can optionally be filtered using a number of parameters described below.
   */
  async listAllMethods(
    request: operations.ListAllMethodsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListAllMethodsResponseBody> {
    return unwrapAsync(methodsAPIListAllMethods(
      this,
      request,
      options,
    ));
  }

  /**
   * Get payment method
   *
   * @remarks
   * Retrieve a single payment method by its ID.
   *
   * If a method is not available on this profile, a `404 Not Found` response is returned. If the method is available but not enabled yet, a status `403 Forbidden` is returned. You can enable payments methods via the [Enable payment method endpoint](enable-method) of the Profiles API, or via the Mollie Dashboard.
   *
   * If you do not know the method's ID, you can use the [methods list endpoint](list-methods) to retrieve all payment methods that are available.
   *
   * Additionally, it is possible to check if wallet methods such as Apple Pay are enabled by passing the wallet ID (`applepay`) as the method ID.
   */
  async getMethod(
    request: operations.GetMethodRequest,
    options?: RequestOptions,
  ): Promise<operations.GetMethodResponseBody> {
    return unwrapAsync(methodsAPIGetMethod(
      this,
      request,
      options,
    ));
  }

  /**
   * Enable payment method
   *
   * @remarks
   * Enable a payment method on a specific profile.
   *
   * When using a profile-specific API credential, the alias `me` can be used instead of the profile ID to refer to the current profile.
   *
   * Some payment methods require extra steps in order to be activated. In cases where a step at the payment method provider needs to be completed first, the status will be set to `pending-external` and the response will contain a link to complete the activation at the provider.
   *
   * To enable voucher or gift card issuers, refer to the [Enable payment method issuer](enable-method-issuer) endpoint.
   */
  async enableMethod(
    request: operations.EnableMethodRequest,
    options?: RequestOptions,
  ): Promise<operations.EnableMethodResponseBody> {
    return unwrapAsync(methodsAPIEnableMethod(
      this,
      request,
      options,
    ));
  }

  /**
   * Disable payment method
   *
   * @remarks
   * Disable a payment method on a specific profile.
   *
   * When using a profile-specific API credential, the alias `me` can be used instead of the profile ID to refer to the current profile.
   */
  async disableMethod(
    request: operations.DisableMethodRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(methodsAPIDisableMethod(
      this,
      request,
      options,
    ));
  }

  /**
   * Enable payment method issuer
   *
   * @remarks
   * Enable an issuer for a payment method on a specific profile.
   *
   * Currently only the payment methods `voucher` and `giftcard` are supported.
   *
   * When using a profile-specific API credential, the alias `me` can be used instead of the profile ID to refer to the current profile.
   */
  async enableMethodIssuer(
    request: operations.EnableMethodIssuerRequest,
    options?: RequestOptions,
  ): Promise<operations.EnableMethodIssuerResponseBody> {
    return unwrapAsync(methodsAPIEnableMethodIssuer(
      this,
      request,
      options,
    ));
  }

  /**
   * Disable payment method issuer
   *
   * @remarks
   * Disable an issuer for a payment method on a specific profile.
   *
   * Currently only the payment methods `voucher` and `giftcard` are supported.
   *
   * When using a profile-specific API credential, the alias `me` can be used instead of the profile ID to refer to the current profile.
   */
  async disableMethodIssuer(
    request: operations.DisableMethodIssuerRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(methodsAPIDisableMethodIssuer(
      this,
      request,
      options,
    ));
  }
}
