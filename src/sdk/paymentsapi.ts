/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paymentsAPICancelPayment } from "../funcs/paymentsAPICancelPayment.js";
import { paymentsAPICreatePayment } from "../funcs/paymentsAPICreatePayment.js";
import { paymentsAPIGetPayment } from "../funcs/paymentsAPIGetPayment.js";
import { paymentsAPIListPayments } from "../funcs/paymentsAPIListPayments.js";
import { paymentsAPIUpdatePayment } from "../funcs/paymentsAPIUpdatePayment.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PaymentsAPI extends ClientSDK {
  /**
   * Create payment
   *
   * @remarks
   * Payment creation is elemental to the Mollie API: this is where most payment implementations start off.
   *
   * Once you have created a payment, you should redirect your customer to the URL in the `_links.checkout` property from the response.
   *
   * To wrap your head around the payment process, an explanation and flow charts can be found in the 'Accepting payments' guide.
   *
   * If you specify the `method` parameter when creating a payment, optional additional parameters may be available for the payment method that are not listed below. Please refer to the guide on [method-specific parameters](extra-payment-parameters).
   */
  async createPayment(
    request: operations.CreatePaymentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(paymentsAPICreatePayment(
      this,
      request,
      options,
    ));
  }

  /**
   * List payments
   *
   * @remarks
   * Retrieve all payments created with the current website profile.
   *
   * The results are paginated.
   */
  async listPayments(
    request: operations.ListPaymentsRequest,
    options?: RequestOptions,
  ): Promise<operations.ListPaymentsResponseBody> {
    return unwrapAsync(paymentsAPIListPayments(
      this,
      request,
      options,
    ));
  }

  /**
   * Get payment
   *
   * @remarks
   * Retrieve a single payment object by its payment ID.
   */
  async getPayment(
    request: operations.GetPaymentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetPaymentResponseBody> {
    return unwrapAsync(paymentsAPIGetPayment(
      this,
      request,
      options,
    ));
  }

  /**
   * Update payment
   *
   * @remarks
   * Certain details of an existing payment can be updated.
   *
   * For an in-depth explanation of each parameter, see [Create payment](create-payment).
   */
  async updatePayment(
    request: operations.UpdatePaymentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(paymentsAPIUpdatePayment(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel payment
   *
   * @remarks
   * Depending on the payment method, you may be able to cancel a payment for a certain amount of time â€” usually until the next business day or as long as the payment status is open.
   *
   * Payments may also be canceled manually from the Mollie Dashboard.
   *
   * The `isCancelable` property on the [Payment object](get-payment) will indicate if the payment can be canceled.
   */
  async cancelPayment(
    request: operations.CancelPaymentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(paymentsAPICancelPayment(
      this,
      request,
      options,
    ));
  }
}
